{"version":3,"sources":["webpack:///./src/app/store/entity/entity-services/company-deduction.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/company-deduction.service.ts","webpack:///./src/app/shared/deductions/company-deduction-item.ts","webpack:///./src/app/shared/deductions/company-deduction-item.ts.pre-build-optimizer.js","webpack:///./src/app/shared/deductions/deduction-category.ts","webpack:///./src/app/shared/deductions/deduction-category.ts.pre-build-optimizer.js","webpack:///./src/app/shared/deductions/deduction-command.ts","webpack:///./src/app/shared/deductions/deduction-command.ts.pre-build-optimizer.js","webpack:///./src/app/shared/deductions/get-deduction-categories.ts","webpack:///./src/app/shared/deductions/index.ts","webpack:///./src/app/store/entity/entity-services/deduction.service.ts","webpack:///./src/app/store/entity/entity-services/deduction.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/employee-deduction.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/employee-deduction.service.ts"],"names":["__webpack_require__","d","__webpack_exports__","CompanyDeductionService","extendStatics","_utils__WEBPACK_IMPORTED_MODULE_0__","_model__WEBPACK_IMPORTED_MODULE_1__","_current_company_entity_collection_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_company_entity_helper_service__WEBPACK_IMPORTED_MODULE_4__","__extends","Object","setPrototypeOf","__proto__","Array","b","p","hasOwnProperty","__","this","constructor","prototype","create","ENTITY_COMPANY_DEDUCTION","_super","helper","_this","call","companyDeductions$","entities$","createFromDeduction","deduction","Error","save","deductions","deletes","filter","isRemoved","id","updates","adds","map","generateId","changes","add","update","delete","saveEntities","ngInjectableDef","factory","token","providedIn","company_deduction_item_CompanyDeductionItem","CompanyDeductionItem","isDirty","companyDeductionList","isCompleted","isDeleted","companyDeductions","codeGroupId","name","abbreviation","length","description","trim","defaultDescription","defaultAbbreviation","defineProperty","get","filtered","notDeletedAndHasPrePosTax","deductionPlanTaxOptionCode","model","PRETAX","enumerable","configurable","POSTTAX","viewModelToEntity","t","isRetirement","isP401KRepayment","codeType","setCode","code","parameters","find","p1","key","type","value","push","getCode","pCode","deductionCodeTypeId","isNewCompanyDeductionItem","cd","DeductionCategory","title","expanded","categoryId","category","deductionTitles","DeductionTitle","options","codeSequencer","allowPreAndPost","enabled","isHidden","hasPreTax","hasPostTax","baseLabel","order","maxAllowedToCreate","freeSlots","companyDeductionItem","CreateCompanyDeductionCommand","askPreOrPostTax","forcePreTax","forcePostTax","EditCompanyDeductionCommand","cdi","getDeductionCategories","ds","cat","filteredDeductions","it","plan401Replay","ret","loanRepayment","Retirements","401K Repayment","buildDeductionCategoryRetirements","buildDeductionCategory","miscPre","miscPost","codeTypeId","createCustomDeductionTitle","key2","buildDeductionCategoryInsurancePremiums","buildDeductionCategoryHsa","garnishmentGoal","garnishmentNoGoal","childSupport","customWithGoal","customNoGoal","buildDeductionCategoryOther","buildInitialCompanyDeductionsCategories","updateCompanyDeductionCategories","currentState","cdis","eds","sort","a","localeCompare","index","dt","updateTreeState","categories","currentInEdit","keys","isInstantiatedByTaxMode","getIsPreInstantiated","getIsPostInstantiated","undefined","isDeductionTypeInstantiated","instances","getFreeSlotsForDeductionsType","isPreTax","d1","buildCommandForCreation","res","toString","buildCommandForEdit","label","maxToCreate","dic","selectionCriteria","buildSelectionCriteria","groupTitles","dc","cafeteria2Entry","values","hsaEntries","includes","hsa","reduce","concat","groupItems","setItemOrder","item","reorderItems","DeductionService","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_environment__WEBPACK_IMPORTED_MODULE_6__","_angular_core__WEBPACK_IMPORTED_MODULE_7__","_entity_helper_service__WEBPACK_IMPORTED_MODULE_8__","_angular_common_http__WEBPACK_IMPORTED_MODULE_9__","_core_services_logger_service__WEBPACK_IMPORTED_MODULE_10__","deductionsUrl","apiRoot","entityHelper","http","logger","elements","collectionServiceElementsFactory","dispatcher","loaded$","selectors$","deductions$","pipe","_a","newDeductions","addAllToCache","error","setLoaded","clearCache","EmployeeDeductionService","rxjs_operators__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","employeeDeductions$","getEmployeeDeductions","empId","employeeId","getDeductionsLinkedTo","companyDeductionId"],"mappings":"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","file":"5.951af3aababf984902c0.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { changeItemFactory as cif } from '@utils';\nimport { CompanyDeduction } from '@model';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar ENTITY_COMPANY_DEDUCTION = 'CompanyDeduction';\nvar CompanyDeductionService = /** @class */ (function (_super) {\n    __extends(CompanyDeductionService, _super);\n    function CompanyDeductionService(helper) {\n        var _this = _super.call(this, ENTITY_COMPANY_DEDUCTION, helper) || this;\n        _this.helper = helper;\n        /**\n         * Company Deductions\n         */\n        _this.companyDeductions$ = _this.entities$;\n        return _this;\n    }\n    /**\n     * Create new CompanyDeduction from a deduction master.\n     * The id is empty because will save with upsert.\n     */\n    CompanyDeductionService.prototype.createFromDeduction = function (deduction) {\n        if (!deduction) {\n            throw new Error('deduction is null');\n        }\n        return this.create(new CompanyDeduction(deduction));\n    };\n    // TODO: Test with real services\n    /**\n     * Multi-entity save of CompanyDeduction with adds, updates and deletes\n     * @param deductions Array of deductions to add, update, or delete.\n     * Deletes have isRemoved: true\n     * Updates are non-deletes with an id\n     * Adds are non-deletes without an id; will generate that id here.\n     * @returns Terminating observable of ChangeSet that emits when server responds\n     */\n    CompanyDeductionService.prototype.save = function (deductions) {\n        var _this = this;\n        var deletes = deductions.filter(function (d) { return d.isRemoved === true && d.id; });\n        // Ignore deductions with isRemoved:true but no id because they don't exist on the server\n        // Cannot use ChangeSetOp.Upsert because server does not support it.\n        // Separate non-deletes into updates (have id) and adds (no id)\n        var updates = deductions.filter(function (d) { return d.isRemoved !== true && d.id; });\n        // Identity new deductions by missing id and generate their ids before adding\n        var adds = deductions\n            .filter(function (d) { return d.isRemoved !== true && !d.id; })\n            .map(function (d) {\n            d.id = _this.helper.generateId();\n            return d;\n        });\n        var changes = [\n            cif.add(ENTITY_COMPANY_DEDUCTION, adds),\n            cif.update(ENTITY_COMPANY_DEDUCTION, updates),\n            cif.delete(ENTITY_COMPANY_DEDUCTION, deletes)\n        ];\n        var changeSet = { changes: changes };\n        return this.saveEntities(changeSet, '/save/company-deduction');\n    };\n    CompanyDeductionService.ngInjectableDef = i0.defineInjectable({ factory: function CompanyDeductionService_Factory() { return new CompanyDeductionService(i0.inject(i1.CompanyEntityHelperService)); }, token: CompanyDeductionService, providedIn: \"root\" });\n    return CompanyDeductionService;\n}(CurrentCompanyEntityCollectionService));\nexport { CompanyDeductionService };\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ChangeSet } from 'ngrx-data';\r\nimport { changeItemFactory as cif } from '@utils';\r\n\r\nimport { CompanyDeduction, Deduction } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\n\r\nconst ENTITY_COMPANY_DEDUCTION = 'CompanyDeduction';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CompanyDeductionService extends CurrentCompanyEntityCollectionService<CompanyDeduction> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super(ENTITY_COMPANY_DEDUCTION, helper);\r\n  }\r\n  /**\r\n   * Company Deductions\r\n   */\r\n  readonly companyDeductions$ = this.entities$;\r\n\r\n  /**\r\n   * Create new CompanyDeduction from a deduction master.\r\n   * The id is empty because will save with upsert.\r\n   */\r\n  createFromDeduction(deduction: Deduction): CompanyDeduction {\r\n    if (!deduction) {\r\n      throw new Error('deduction is null');\r\n    }\r\n    return this.create(new CompanyDeduction(deduction));\r\n  }\r\n\r\n  // TODO: Test with real services\r\n  /**\r\n   * Multi-entity save of CompanyDeduction with adds, updates and deletes\r\n   * @param deductions Array of deductions to add, update, or delete.\r\n   * Deletes have isRemoved: true\r\n   * Updates are non-deletes with an id\r\n   * Adds are non-deletes without an id; will generate that id here.\r\n   * @returns Terminating observable of ChangeSet that emits when server responds\r\n   */\r\n  save(deductions: CompanyDeduction[]): Observable<ChangeSet> {\r\n    const deletes = deductions.filter(d => d.isRemoved === true && d.id);\r\n    // Ignore deductions with isRemoved:true but no id because they don't exist on the server\r\n\r\n    // Cannot use ChangeSetOp.Upsert because server does not support it.\r\n    // Separate non-deletes into updates (have id) and adds (no id)\r\n    const updates = deductions.filter(d => d.isRemoved !== true && d.id);\r\n\r\n    // Identity new deductions by missing id and generate their ids before adding\r\n    const adds = deductions\r\n    .filter(d => d.isRemoved !== true && !d.id)\r\n    .map(d => {\r\n      d.id = this.helper.generateId();\r\n      return d;\r\n    });\r\n\r\n    const changes = [\r\n      cif.add(ENTITY_COMPANY_DEDUCTION, adds),\r\n      cif.update(ENTITY_COMPANY_DEDUCTION, updates),\r\n      cif.delete(ENTITY_COMPANY_DEDUCTION, deletes)\r\n    ];\r\n    const changeSet: ChangeSet<CompanyDeduction> = { changes };\r\n\r\n    return this.saveEntities(changeSet, '/save/company-deduction');\r\n  }\r\n}\r\n","import { CompanyDeduction, Deduction, DeductionKeyValue, DeductionPlanType } from '@model';\r\n\r\n/** Company Deduction item visible for a user in the UI\r\n *  Maps with 1 master Deduction type\r\n *  Maps with 1..N rows in DB (CompanyDeduction)\r\n */\r\nexport class CompanyDeductionItem {\r\n  /** Type */\r\n  deduction: Deduction;\r\n\r\n  /** Deduction instances and parameters */\r\n  companyDeductions: CompanyDeduction[];\r\n\r\n  name: string;\r\n  abbreviation: string;\r\n\r\n  isCompleted = false;\r\n\r\n  /** True if need to be saved */\r\n  isDirty: boolean;\r\n\r\n  /** True if marked for deletion */\r\n  isDeleted = false;\r\n\r\n  constructor(deduction: Deduction, isDirty = true,\r\n              companyDeductionList: CompanyDeduction[] = []) {\r\n    this.deduction = deduction;\r\n    this.isDirty = isDirty;\r\n    this.companyDeductions = companyDeductionList;\r\n\r\n    if (deduction.codeGroupId === 7) { // HSA\r\n      this.name = 'Health Savings Account (HSA)';\r\n      this.abbreviation = 'HSA';\r\n    } else {\r\n      if (companyDeductionList.length > 0) {\r\n        this.name = (companyDeductionList[0].description || '').trim();\r\n        this.abbreviation = (companyDeductionList[0].abbreviation || '').trim();\r\n      } else {\r\n        this.name = (deduction.defaultDescription || '').trim();\r\n        this.abbreviation = (deduction.defaultAbbreviation || '').trim();\r\n      }\r\n    }\r\n  }\r\n\r\n  get isPreTax(): boolean {\r\n    if (!this.companyDeductions) {\r\n      return null; // unknown\r\n    }\r\n    const filtered = this.companyDeductions.filter(notDeletedAndHasPrePosTax);\r\n    if (filtered.length !== 1) {\r\n      return null; // unknown\r\n    }\r\n    return filtered[0].deductionPlanTaxOptionCode === DeductionPlanType.PRETAX;\r\n  }\r\n  get isPostTax(): boolean {\r\n    if (!this.companyDeductions) {\r\n      return null; // unknown\r\n    }\r\n    const filtered = this.companyDeductions.filter(notDeletedAndHasPrePosTax);\r\n    if (filtered.length !== 1) {\r\n      return null; // unknown\r\n    }\r\n    return filtered[0].deductionPlanTaxOptionCode === DeductionPlanType.POSTTAX;\r\n  }\r\n  get isCatchUp(): boolean {\r\n    return (this.deduction.codeGroupId === 6); // 6 === Retirement Plans Catch Up  (Group)\r\n  }\r\n\r\n  viewModelToEntity(): void {\r\n    this.companyDeductions.map(t => {\r\n      t.description = this.name.trim();\r\n      t.abbreviation = this.abbreviation.trim();\r\n    });\r\n  }\r\n\r\n  isRetirement(): boolean {\r\n    return this.deduction.codeGroupId === 1 || // retirements group\r\n           this.deduction.codeGroupId === 6;   // retirement group catch-up\r\n  }\r\n  isP401KRepayment(): boolean {\r\n    return this.deduction.codeType === '401k Loan Repayment';   // repay for 401K\r\n  }\r\n\r\n  setCode(code: string): void {\r\n    const p = this.companyDeductions[0].parameters.find(p1 => p1.key === 'code');\r\n    if (p) {\r\n      p.type = 'string';\r\n      p.value = code;\r\n    } else {\r\n      this.companyDeductions[0].parameters.push(\r\n        new DeductionKeyValue('code', 'string', code));\r\n    }\r\n  }\r\n  getCode(): string {\r\n    if (this.companyDeductions.length === 0) {\r\n      return null;\r\n    }\r\n    const pCode = this.companyDeductions[0].parameters.find(p => p.key === 'code');\r\n    if (pCode) {\r\n      return <string> pCode.value;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction notDeletedAndHasPrePosTax(d: CompanyDeduction): boolean {\r\n  return !d.isRemoved &&\r\n    (d.deductionCodeTypeId === 20 ||  // Pre tax Medical\r\n     d.deductionCodeTypeId === 21 ||  // Pre tax Dental\r\n     d.deductionCodeTypeId === 22 ||  // Pre tax Vision\r\n     d.deductionCodeTypeId === 30 ||  // Post tax Medical\r\n     d.deductionCodeTypeId === 31 ||  // Post tax Dental\r\n     d.deductionCodeTypeId === 32     // Post tax Vision\r\n    );\r\n}\r\n\r\nexport function isNewCompanyDeductionItem(cd: CompanyDeductionItem): boolean {\r\n  if (!cd || !cd.companyDeductions || cd.companyDeductions.length === 0) {\r\n    return true;\r\n  }\r\n  return cd.companyDeductions[0].id === null;\r\n}\r\n","import { DeductionKeyValue, DeductionPlanType } from '@model';\n/** Company Deduction item visible for a user in the UI\n *  Maps with 1 master Deduction type\n *  Maps with 1..N rows in DB (CompanyDeduction)\n */\nvar CompanyDeductionItem = /** @class */ (function () {\n    function CompanyDeductionItem(deduction, isDirty, companyDeductionList) {\n        if (isDirty === void 0) { isDirty = true; }\n        if (companyDeductionList === void 0) { companyDeductionList = []; }\n        this.isCompleted = false;\n        /** True if marked for deletion */\n        this.isDeleted = false;\n        this.deduction = deduction;\n        this.isDirty = isDirty;\n        this.companyDeductions = companyDeductionList;\n        if (deduction.codeGroupId === 7) {\n            this.name = 'Health Savings Account (HSA)';\n            this.abbreviation = 'HSA';\n        }\n        else {\n            if (companyDeductionList.length > 0) {\n                this.name = (companyDeductionList[0].description || '').trim();\n                this.abbreviation = (companyDeductionList[0].abbreviation || '').trim();\n            }\n            else {\n                this.name = (deduction.defaultDescription || '').trim();\n                this.abbreviation = (deduction.defaultAbbreviation || '').trim();\n            }\n        }\n    }\n    Object.defineProperty(CompanyDeductionItem.prototype, \"isPreTax\", {\n        get: function () {\n            if (!this.companyDeductions) {\n                return null; // unknown\n            }\n            var filtered = this.companyDeductions.filter(notDeletedAndHasPrePosTax);\n            if (filtered.length !== 1) {\n                return null; // unknown\n            }\n            return filtered[0].deductionPlanTaxOptionCode === DeductionPlanType.PRETAX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompanyDeductionItem.prototype, \"isPostTax\", {\n        get: function () {\n            if (!this.companyDeductions) {\n                return null; // unknown\n            }\n            var filtered = this.companyDeductions.filter(notDeletedAndHasPrePosTax);\n            if (filtered.length !== 1) {\n                return null; // unknown\n            }\n            return filtered[0].deductionPlanTaxOptionCode === DeductionPlanType.POSTTAX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompanyDeductionItem.prototype, \"isCatchUp\", {\n        get: function () {\n            return (this.deduction.codeGroupId === 6); // 6 === Retirement Plans Catch Up  (Group)\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompanyDeductionItem.prototype.viewModelToEntity = function () {\n        var _this = this;\n        this.companyDeductions.map(function (t) {\n            t.description = _this.name.trim();\n            t.abbreviation = _this.abbreviation.trim();\n        });\n    };\n    CompanyDeductionItem.prototype.isRetirement = function () {\n        return this.deduction.codeGroupId === 1 || // retirements group\n            this.deduction.codeGroupId === 6; // retirement group catch-up\n    };\n    CompanyDeductionItem.prototype.isP401KRepayment = function () {\n        return this.deduction.codeType === '401k Loan Repayment'; // repay for 401K\n    };\n    CompanyDeductionItem.prototype.setCode = function (code) {\n        var p = this.companyDeductions[0].parameters.find(function (p1) { return p1.key === 'code'; });\n        if (p) {\n            p.type = 'string';\n            p.value = code;\n        }\n        else {\n            this.companyDeductions[0].parameters.push(new DeductionKeyValue('code', 'string', code));\n        }\n    };\n    CompanyDeductionItem.prototype.getCode = function () {\n        if (this.companyDeductions.length === 0) {\n            return null;\n        }\n        var pCode = this.companyDeductions[0].parameters.find(function (p) { return p.key === 'code'; });\n        if (pCode) {\n            return pCode.value;\n        }\n        return null;\n    };\n    return CompanyDeductionItem;\n}());\nexport { CompanyDeductionItem };\nfunction notDeletedAndHasPrePosTax(d) {\n    return !d.isRemoved &&\n        (d.deductionCodeTypeId === 20 || // Pre tax Medical\n            d.deductionCodeTypeId === 21 || // Pre tax Dental\n            d.deductionCodeTypeId === 22 || // Pre tax Vision\n            d.deductionCodeTypeId === 30 || // Post tax Medical\n            d.deductionCodeTypeId === 31 || // Post tax Dental\n            d.deductionCodeTypeId === 32 // Post tax Vision\n        );\n}\nexport function isNewCompanyDeductionItem(cd) {\n    if (!cd || !cd.companyDeductions || cd.companyDeductions.length === 0) {\n        return true;\n    }\n    return cd.companyDeductions[0].id === null;\n}\n","import { Deduction } from '@model';\r\nimport { CompanyDeductionItem } from './company-deduction-item';\r\n\r\nexport class DeductionCategory {\r\n  categoryId: number;            // Group Id\r\n  category: string;              // Group name\r\n  deductionTitles: DeductionTitleDictionary;\r\n  expanded = false;              // UI Accordion state: expanded/collapsed\r\n\r\n  constructor(code: number, title: string, expanded = false) {\r\n    this.categoryId = code;\r\n    this.category = title;\r\n    this.deductionTitles = {};\r\n    this.expanded = expanded;\r\n  }\r\n}\r\n\r\n\r\nexport interface DeductionTitleBuilder {\r\n  key: string;\r\n  code?: string;\r\n  baseLabel: string;\r\n  deductions?: Deduction[];\r\n  order?: number;\r\n  maxAllowedToCreate?: number;\r\n  companyDeductionItem?: CompanyDeductionItem;\r\n}\r\n\r\nexport class DeductionTitle {\r\n  readonly key: string;\r\n  readonly code: string;       // Instance code with respect key/type\r\n  codeSequencer = 1;        // sequencer to indentify instances by code (UI only)\r\n  deductions: Deduction[];  // used to reference deductions at the Company Level\r\n  companyDeductionItem: CompanyDeductionItem;  // used to point to company dedution at the Employee Level\r\n  selectionCriteria: string;\r\n  readonly maxAllowedToCreate: number;\r\n  freeSlots: number;\r\n  allowPreAndPost = false;\r\n\r\n  // User Interface properties\r\n  baseLabel: string;\r\n  order: number;\r\n  enabled = true;\r\n  isHidden = false;\r\n\r\n  hasPreTax = false;\r\n  hasPostTax = false;\r\n\r\n  constructor(options: DeductionTitleBuilder) {\r\n    options = options || {} as DeductionTitleBuilder;\r\n\r\n    this.key = options.key;\r\n    this.code = options.code || '1';\r\n    this.baseLabel = options.baseLabel;\r\n    this.deductions = options.deductions || [];\r\n    this.order = options.order || 1;\r\n    this.maxAllowedToCreate = options.maxAllowedToCreate || 1;\r\n    this.freeSlots = options.maxAllowedToCreate || 1;\r\n    this.companyDeductionItem = options.companyDeductionItem;\r\n  }\r\n\r\n  get label(): string {\r\n    if (this.allowPreAndPost) {\r\n      if (this.hasPreTax && !this.hasPostTax) {\r\n        return `${this.baseLabel} Post-Tax`;\r\n      } else if (!this.hasPreTax && this.hasPostTax) {\r\n        return `${this.baseLabel} Pre-Tax`;\r\n      } else {\r\n        return this.baseLabel;\r\n      }\r\n    }\r\n    if (this.maxAllowedToCreate > 1) {\r\n      return `${this.baseLabel} (${this.freeSlots})`;\r\n    }\r\n    return this.baseLabel;\r\n  }\r\n}\r\n\r\nexport interface DeductionTitleDictionary {\r\n  [key: string]: DeductionTitle;\r\n}\r\n","var DeductionCategory = /** @class */ (function () {\n    function DeductionCategory(code, title, expanded) {\n        if (expanded === void 0) { expanded = false; }\n        this.expanded = false; // UI Accordion state: expanded/collapsed\n        this.categoryId = code;\n        this.category = title;\n        this.deductionTitles = {};\n        this.expanded = expanded;\n    }\n    return DeductionCategory;\n}());\nexport { DeductionCategory };\nvar DeductionTitle = /** @class */ (function () {\n    function DeductionTitle(options) {\n        this.codeSequencer = 1; // sequencer to indentify instances by code (UI only)\n        this.allowPreAndPost = false;\n        this.enabled = true;\n        this.isHidden = false;\n        this.hasPreTax = false;\n        this.hasPostTax = false;\n        options = options || {};\n        this.key = options.key;\n        this.code = options.code || '1';\n        this.baseLabel = options.baseLabel;\n        this.deductions = options.deductions || [];\n        this.order = options.order || 1;\n        this.maxAllowedToCreate = options.maxAllowedToCreate || 1;\n        this.freeSlots = options.maxAllowedToCreate || 1;\n        this.companyDeductionItem = options.companyDeductionItem;\n    }\n    Object.defineProperty(DeductionTitle.prototype, \"label\", {\n        get: function () {\n            if (this.allowPreAndPost) {\n                if (this.hasPreTax && !this.hasPostTax) {\n                    return this.baseLabel + \" Post-Tax\";\n                }\n                else if (!this.hasPreTax && this.hasPostTax) {\n                    return this.baseLabel + \" Pre-Tax\";\n                }\n                else {\n                    return this.baseLabel;\n                }\n            }\n            if (this.maxAllowedToCreate > 1) {\n                return this.baseLabel + \" (\" + this.freeSlots + \")\";\n            }\n            return this.baseLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DeductionTitle;\n}());\nexport { DeductionTitle };\n","import { Deduction } from '@model';\r\nimport { CompanyDeductionItem } from './company-deduction-item';\r\n\r\nexport interface DeductionCommand {\r\n  readonly type: string;\r\n  readonly code: string;\r\n  readonly isNew: boolean;\r\n  deductions: Deduction[];\r\n}\r\n\r\nexport class CreateCompanyDeductionCommand implements DeductionCommand {\r\n  readonly type = 'create-company-deduction';\r\n  deductions: Deduction[];\r\n  code: string;\r\n\r\n  askPreOrPostTax = false;\r\n  forcePreTax = false;\r\n  forcePostTax = false;\r\n\r\n  get isNew(): boolean { return  true; }\r\n}\r\n\r\n\r\nexport class EditCompanyDeductionCommand implements DeductionCommand {\r\n  readonly type = 'edit-company-deduction';\r\n  deductions: Deduction[];\r\n  code: string;\r\n\r\n  get isNew(): boolean { return  false; }\r\n\r\n  constructor(public readonly cdi: CompanyDeductionItem) {\r\n  }\r\n}\r\n","var CreateCompanyDeductionCommand = /** @class */ (function () {\n    function CreateCompanyDeductionCommand() {\n        this.type = 'create-company-deduction';\n        this.askPreOrPostTax = false;\n        this.forcePreTax = false;\n        this.forcePostTax = false;\n    }\n    Object.defineProperty(CreateCompanyDeductionCommand.prototype, \"isNew\", {\n        get: function () { return true; },\n        enumerable: true,\n        configurable: true\n    });\n    return CreateCompanyDeductionCommand;\n}());\nexport { CreateCompanyDeductionCommand };\nvar EditCompanyDeductionCommand = /** @class */ (function () {\n    function EditCompanyDeductionCommand(cdi) {\n        this.cdi = cdi;\n        this.type = 'edit-company-deduction';\n    }\n    Object.defineProperty(EditCompanyDeductionCommand.prototype, \"isNew\", {\n        get: function () { return false; },\n        enumerable: true,\n        configurable: true\n    });\n    return EditCompanyDeductionCommand;\n}());\nexport { EditCompanyDeductionCommand };\n","import { Deduction, DeductionPlanType, EmployeeDeduction } from '@model';\nimport { CreateCompanyDeductionCommand, EditCompanyDeductionCommand } from './deduction-command';\nimport { CompanyDeductionItem } from './company-deduction-item';\nimport { DeductionCategory, DeductionTitleDictionary, DeductionTitle\n       } from './deduction-category';\n\n/** Group deductions types to be shown in User Interface (UI grouping criteria)\n * Company Deduction Catalog */\nexport function getDeductionCategories(ds: Deduction[]): DeductionCategory[] {\n  return [\n    buildDeductionCategoryRetirements(ds, 1, 'Retirement'),\n    buildDeductionCategoryInsurancePremiums(ds, 2, 'Insurance Premiums'),\n    buildDeductionCategoryHsa(ds, 3, 'HSA / FSA'),\n    buildDeductionCategoryOther(ds, 4, 'Other (Post-Tax)')\n  ];\n}\n\n/** Group deductions for employees\n * Employee Deduction Catalog showing CompanyDeductions\n * Inital setup\n */\nexport function buildInitialCompanyDeductionsCategories(): DeductionCategory[] {\n  const cat = new DeductionCategory(1, 'Company Deductions', true);\n  return [ cat ];\n}\n\n/** Group deductions for employees\n * Employee Deduction Catalog showing CompanyDeductions\n * Update data based on current state: company deduction + employee deduction state\n */\nexport function updateCompanyDeductionCategories(\n                        currentState:  DeductionCategory[],\n                        cdis: CompanyDeductionItem[],\n                        eds: EmployeeDeduction[]): DeductionCategory[] {\n\n  const cat = new DeductionCategory(1, 'Company Deductions', currentState[0].expanded);\n\n\n  (cdis || []).sort((a, b) => (a.name || '').localeCompare(b.name))\n              .map((cdi, index) => {\n    const dt = new DeductionTitle({\n      key: cdi.name,\n      baseLabel: cdi.name,\n      code: cdi.getCode(),\n      maxAllowedToCreate: 1,\n      order: index * 10,\n      companyDeductionItem: cdi\n    });\n    cat.deductionTitles[dt.key] = dt;\n  });\n\n  return [ cat ];\n}\n\n\n\n/** Updates the Tree State based on created deductions\n * @param categories List of categories\n * @param cdis List of created Deductions Items\n * @param currentInEdit Current element in edition, null if no one is in edit\n */\nexport function updateTreeState(\n  categories: DeductionCategory[],\n  cdis: CompanyDeductionItem[],\n  currentInEdit: CompanyDeductionItem\n): void {\n  categories.map(cat => {\n    Object.keys(cat.deductionTitles).map(key => {\n      const dt = cat.deductionTitles[key];\n\n      if (dt.maxAllowedToCreate === 1) {\n        if (dt.allowPreAndPost) {\n          dt.hasPreTax = getIsPreInstantiated(dt, cdis);\n          dt.hasPostTax = getIsPostInstantiated(dt, cdis);\n\n          dt.enabled = !(dt.hasPreTax && dt.hasPostTax);\n        } else {\n          dt.enabled = !isDeductionTypeInstantiated(dt, cdis);\n        }\n      } else if (dt.maxAllowedToCreate > 1) {\n          const freeSlots = getFreeSlotsForDeductionsType(dt, cdis);\n          dt.freeSlots = freeSlots;\n          dt.enabled = (freeSlots > 0);\n      }\n    });\n  });\n}\n\n// #region helper fns\nfunction getIsPreInstantiated(dt: DeductionTitle, cdis: CompanyDeductionItem[]): boolean {\n  return isInstantiatedByTaxMode(dt, cdis, true);\n}\nfunction getIsPostInstantiated(dt: DeductionTitle, cdis: CompanyDeductionItem[]): boolean {\n  return isInstantiatedByTaxMode(dt, cdis, false);\n}\nfunction isInstantiatedByTaxMode(dt: DeductionTitle, cdis: CompanyDeductionItem[], isPreTax: boolean): boolean {\n  const d = dt.deductions.find(d1 => d1.deductionPlanTaxOptionCode === (isPreTax ? 'PRETAX' : 'POSTTAX'));\n  const instances = cdis.filter(cdi =>\n    !cdi.isDeleted && cdi.deduction === d);\n  return instances.length === 1;\n}\n\nfunction getFreeSlotsForDeductionsType(dt: DeductionTitle, cdis: CompanyDeductionItem[]): number {\n  const instances = cdis.filter(cdi =>\n         !cdi.isDeleted &&\n          cdi.deduction.codeType === dt.key);\n\n  if (instances.length > 0) {\n    return dt.maxAllowedToCreate - instances.length;\n  }\n  if (dt.key === 'Retirements') {\n    return dt.maxAllowedToCreate - cdis.filter(cdi =>\n      !cdi.isDeleted && cdi.deduction.codeGroupId === 1 // Retiremement Plans Group\n    ).length;\n  }\n  if (dt.key === 'HSA') {\n    return dt.maxAllowedToCreate - cdis.filter(cdi =>\n      !cdi.isDeleted && cdi.deduction.codeGroupId === 7 // HSA\n    ).length;\n  }\n  return dt.maxAllowedToCreate;\n}\n\nfunction isDeductionTypeInstantiated(dt: DeductionTitle, cdis: CompanyDeductionItem[]): boolean {\n  const foundInstance = cdis.filter(cdi => !cdi.isDeleted)\n                            .find(cdi =>\n                              cdi.getCode() === dt.code &&\n                              cdi.deduction.codeType === dt.key\n                            );\n  if (foundInstance) {\n    return true;\n  }\n  if (dt.key === 'Retirements') {\n    return cdis.filter(cdi => !cdi.isDeleted)\n               .find(cdi =>\n                 cdi.deduction.codeGroupId === 1 // Retiremement Plans Group\n               ) !== undefined;\n  }\n  if (dt.key === 'HSA') {\n    return cdis.filter(cdi => !cdi.isDeleted)\n               .find(cdi =>\n                 cdi.deduction.codeGroupId === 7 // HSA\n               ) !== undefined;\n  }\n  return false;\n}\n\nexport function buildCommandForCreation(dt: DeductionTitle): CreateCompanyDeductionCommand {\n  const res = new CreateCompanyDeductionCommand();\n  res.askPreOrPostTax = dt.allowPreAndPost && !dt.hasPreTax && !dt.hasPostTax;\n  res.forcePreTax = dt.allowPreAndPost && !dt.hasPreTax && dt.hasPostTax;\n  res.forcePostTax = dt.allowPreAndPost && dt.hasPreTax && !dt.hasPostTax;\n  if (res.forcePreTax) {\n    res.deductions = dt.deductions.filter(d => d.deductionPlanTaxOptionCode === DeductionPlanType.PRETAX);\n    res.code = '2';\n  } else if (res.forcePostTax) {\n    res.deductions = dt.deductions.filter(d => d.deductionPlanTaxOptionCode === DeductionPlanType.POSTTAX);\n    res.code = '2';\n  } else if (dt.maxAllowedToCreate > 1) {\n    res.deductions = dt.deductions;\n    res.code = (dt.codeSequencer++).toString();\n  } else {\n    res.deductions = dt.deductions;\n    res.code = '1';\n  }\n\n\n  return res;\n}\n\nexport function buildCommandForEdit(cdi: CompanyDeductionItem): EditCompanyDeductionCommand {\n  const res = new EditCompanyDeductionCommand(cdi);\n  return res;\n}\n\n\nfunction buildDeductionCategoryRetirements(\n  ds: Deduction[],\n  code: number,\n  title: string\n): DeductionCategory {\n  const cat = new DeductionCategory(code, title);\n  const filteredDeductions: Deduction[] = ds.filter(\n    it =>\n      (it.codeGroupId === 1 || // Retirements plans\n        it.codeGroupId === 6) && // Retirement Plans Catch Up\n      it.codeType !== '401k Loan Repayment'\n  );\n  const plan401Replay: Deduction[] = ds.filter(it => it.codeType === '401k Loan Repayment');\n\n  const ret = new DeductionTitle({\n    key: 'Retirements',\n    baseLabel: 'Retirements',\n    deductions: filteredDeductions,\n    order: 10\n  });\n  const loanRepayment = new DeductionTitle({\n    key: '401k Loan Repayment',\n    baseLabel: '401k Loan Repayment',\n    deductions: plan401Replay,\n    order: 20\n  });\n  cat.deductionTitles = {\n    Retirements: ret,\n    '401K Repayment': loanRepayment\n  };\n  return cat;\n}\nfunction buildDeductionCategoryInsurancePremiums(ds: Deduction[], code: number, title: string): DeductionCategory {\n  const cat = buildDeductionCategory(ds, code, title);\n\n  cat.deductionTitles['Medical'].allowPreAndPost = true;\n  cat.deductionTitles['Vision'].allowPreAndPost = true;\n  cat.deductionTitles['Dental'].allowPreAndPost = true;\n\n  const miscPre = ds.find(it =>\n    it.codeType === 'Miscellaneous Pre-Tax' && it.codeGroupId === 2); // Pre-tax\n  const miscPost = ds.find(it =>\n    it.codeType === 'Miscellaneous Post-Tax' && it.codeTypeId === 3); // Post-tax\n\n  delete cat.deductionTitles['Miscellaneous Pre-Tax'];\n  delete cat.deductionTitles['Miscellaneous Post-Tax'];\n\n  const key = 'Miscellaneous Pre-Tax';\n  const label = key;\n  createCustomDeductionTitle(cat, key, null, label, [ miscPre ], 500, 5);\n  const key2 = 'Miscellaneous Post-Tax';\n  const label2 = key2;\n  createCustomDeductionTitle(cat, key2, null, label2, [ miscPost ], 501, 5);\n\n  return cat;\n}\nfunction buildDeductionCategoryHsa(ds: Deduction[], code: number, title: string): DeductionCategory {\n  const cat = buildDeductionCategory(ds, code, title);\n\n  // Inject FSA prefix on labels (per reqs.)\n  cat.deductionTitles['Dependent Care'].baseLabel = 'FSA Dependent Care';\n  cat.deductionTitles['Transportation'].baseLabel = 'FSA Transportation';\n  cat.deductionTitles['Parking'].baseLabel = 'FSA Parking';\n\n  return cat;\n\n}\nfunction buildDeductionCategoryOther(ds: Deduction[], code: number, title: string): DeductionCategory {\n  const cat = buildDeductionCategory(ds, code, title);\n\n  const keyGarnishmentGoal = 'Garnishment with Goal';\n  const keyGarnishmentNoGoal = 'Garnishment No Goal';\n  const keyChildSupport = 'Child Support';\n  const keyMiscellaneousGoal =  'Miscellaneous with Goal';\n  const keyMiscellaneousNoGoal =  'Miscellaneous No Goal';\n\n  const garnishmentGoal: Deduction = ds.find(it => it.codeType === keyGarnishmentGoal);\n  const garnishmentNoGoal: Deduction = ds.find(it => it.codeType === keyGarnishmentNoGoal);\n  const childSupport: Deduction = ds.find(it => it.codeType === keyChildSupport);\n  const customWithGoal: Deduction = ds.find(it => it.codeType === keyMiscellaneousGoal);\n  const customNoGoal: Deduction = ds.find(it => it.codeType === keyMiscellaneousNoGoal);\n\n  createCustomDeductionTitle(cat,\n    keyGarnishmentGoal, null, keyGarnishmentGoal, [ garnishmentGoal ], 2, 8);\n  createCustomDeductionTitle(cat,\n    keyGarnishmentNoGoal, null, keyGarnishmentNoGoal, [ garnishmentNoGoal ], 3, 8);\n  createCustomDeductionTitle(cat,\n    keyChildSupport, null, keyChildSupport, [ childSupport ], 4, 5);\n  const label1 = 'Custom with Goal';\n  createCustomDeductionTitle(cat,\n    keyMiscellaneousGoal, null, label1, [ customWithGoal ], 500, 5);\n  const label2 = 'Custom No Goal';\n  createCustomDeductionTitle(cat,\n    keyMiscellaneousNoGoal, null, label2, [ customNoGoal ], 501, 5);\n\n  return cat;\n}\n\n\nfunction createCustomDeductionTitle(\n    cat: DeductionCategory, key: string, code: string,\n    label: string, ds: Deduction[], order: number, maxToCreate: number): void {\n\n  const dt = new DeductionTitle({\n    key,\n    code,\n    baseLabel: label,\n    deductions: ds,\n    order,\n    maxAllowedToCreate: maxToCreate\n  });\n  const dicKey = code ? (key + '_' + code) : key;\n  cat.deductionTitles[dicKey] = dt;\n}\n\nfunction buildDeductionCategory(\n  ds: Deduction[],\n  code: number,\n  title: string\n): DeductionCategory {\n  const cat = new DeductionCategory(code, title);\n  let filteredDeductions: Deduction[];\n  if (code === 2) {\n    filteredDeductions = ds.filter(\n      it => ( it.codeGroupId === 2 || it.codeGroupId === 3 ) // Pre-Tax Insurance Premiums // Post-Tax Insurance Premiums\n    );\n  } else if (code === 3) {\n    filteredDeductions = ds.filter(\n      it => it.codeGroupId === 7 || it.codeGroupId === 4 // HSA // FSA\n    );\n  } else if (code === 4) {\n    filteredDeductions = ds.filter(\n      it =>\n        (it.codeGroupId !== 1 && // any other groups not grouped before\n          it.codeGroupId !== 2 &&\n          it.codeGroupId !== 3 &&\n          it.codeGroupId !== 4 &&\n          it.codeGroupId !== 5 &&\n          it.codeGroupId !== 6 &&\n          it.codeGroupId !== 7) ||\n        (it.codeGroupId === 5 &&\n          !(it.codeType === 'Miscellaneous with Goal' || it.codeType === 'Miscellaneous No Goal') &&\n          it.codeType !== '401k Loan Repayment')\n    );\n  }\n  cat.deductionTitles = groupTitles(filteredDeductions);\n  groupItems(cat);\n  reorderItems(cat);\n  return cat;\n}\n\n/** Group HSA entries to have only one entry called:\n *  Health Savings Account (HSA) */\nfunction groupItems(dc: DeductionCategory) {\n  if (dc.categoryId === 2) {\n    // Add two items for cafeteria 2\n    const cafeteria2Entry = Object.values(dc.deductionTitles)\n                                  .find(dt => dt.key === 'CAFE 2 deduction');\n    delete dc.deductionTitles[cafeteria2Entry.key];\n\n    const key = cafeteria2Entry.key;\n    const label = 'Cafeteria Plan';\n    createCustomDeductionTitle(dc, key, '1', label, cafeteria2Entry.deductions, 200, 2);\n  }\n\n  if (dc.categoryId === 3) {\n    // HSA / FSA\n    const hsaEntries = Object.values(dc.deductionTitles).filter(dt => dt.key.includes(' HSA'));\n    const hsa = new DeductionTitle({\n      key: 'HSA',\n      baseLabel: 'Health Savings Account (HSA)',\n      deductions: hsaEntries.map(it => it.deductions).reduce((a, b) => a.concat(b), []),\n      order: -1,\n    });\n    hsaEntries.map(it => {\n      delete dc.deductionTitles[it.key];\n    });\n    dc.deductionTitles[hsa.key] = hsa;\n  }\n}\n\nfunction reorderItems(dc: DeductionCategory) {\n  if (dc.categoryId === 2) {\n    // Insurance Premiums\n    setItemOrder('Life Insurance', 100);\n    setItemOrder('Cafeteria Plan', 200);\n    setItemOrder('Miscellaneous', 300);\n  }\n  if (dc.categoryId === 3) {\n    // HSA / FSA\n    setItemOrder('HSA', -1);\n  }\n  if (dc.categoryId === 4) {\n    // Others\n    setItemOrder('Meals', -10);\n    setItemOrder('Garnishment with Goal', -9);\n    setItemOrder('Garnishment No Goal', -8);\n    setItemOrder('Child Support', -7);\n  }\n\n  // WB: Set order only if magic string title is found\n  // The magic strings worry me.\n  // If simply set `dc.deductionTitles[title].order`, page would crash when title not found\n  // App should not crash just because we displayed items in the wrong order\n  function setItemOrder(title: string, order: number) {\n    const item = dc.deductionTitles[title];\n    if (item) {\n      item.order = order;\n    }\n  }\n}\n\nfunction groupTitles(ds: Deduction[]): DeductionTitleDictionary {\n  const dic: DeductionTitleDictionary = {};\n  let index = 0;\n  ds.map(d => {\n    if (!dic[d.codeType]) {\n      // first one\n      dic[d.codeType] = new DeductionTitle({\n        key: d.codeType,\n        baseLabel: d.codeType,\n        deductions: [d],\n        order: (index++) * 10\n      });\n    } else {\n      // existing category, add additional one\n      dic[d.codeType].deductions.push(d);\n    }\n  });\n\n  // If multiple deductions on an item, build a selection criteria\n  for (const key in dic) {\n    if (dic.hasOwnProperty(key)) {\n      const title = dic[key];\n      if (title.deductions.length > 1) {\n        title.selectionCriteria = buildSelectionCriteria(title.deductions);\n      }\n    }\n  }\n  return dic;\n}\n\nfunction buildSelectionCriteria(ds: Deduction[]): string {\n  const preOrPostTax = ds.filter(it => it.codeGroupId === 2 || it.codeGroupId === 3);\n  if (preOrPostTax.length === ds.length) {\n    return 'PRE_OR_POST_TAX';\n  }\n  return 'UNKNOWN';\n}\n\n// #endregion helper fns\n","export * from './company-deduction-item';\r\nexport * from './deduction-category';\r\nexport * from './deduction-command';\r\nexport * from './get-deduction-categories';\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EntityDispatcher } from 'ngrx-data';\n\nimport { of, Observable } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { Deduction } from '@model';\nimport { EntityHelperService } from './entity-helper.service';\nimport { environment } from '@environment';\nimport { LoggerService } from '@core';\n\nconst deductionsUrl = environment.apiRoot + '/deductions';\n\n@Injectable({providedIn: 'root'})\nexport class DeductionService {\n\n  /**\n   * Non-terminating observable of ECommerce Deduction master metadata\n   * Return cached deductions if already loaded, else loads from server.\n   * If server load fails, returns previous deductions (if any)\n   * @returns Cold, non-terminating observable of deductions. Must subscribe and unsubscribe.\n   */\n  deductions$: Observable<Deduction[]>;\n\n  private dispatcher: EntityDispatcher<Deduction>;\n\n  /** Non-terminating, boolean observable indicating if Deductions have been loaded successfully */\n  loaded$: Observable<boolean>;\n\n  constructor(\n    entityHelper: EntityHelperService,\n    private http: HttpClient,\n    private logger: LoggerService\n  ) {\n    const elements = entityHelper.collectionServiceElementsFactory.create<Deduction>('Deduction');\n    this.dispatcher = elements.dispatcher;\n    this.loaded$ = elements.selectors$.loaded$;\n\n    this.deductions$ = elements.selectors$.entities$.pipe(\n      withLatestFrom(this.loaded$),\n      switchMap(([deductions, loaded]) => {\n        return loaded\n          ? of(deductions)\n          : this.http.get<Deduction[]>(deductionsUrl).pipe(\n            map(newDeductions => {\n              this.dispatcher.addAllToCache(newDeductions);\n              return newDeductions;\n            }),\n            catchError(error => {\n               // Swallow error and return previous deductions (if any)\n               this.logger.error('Deductions service failed to return deductions', error);\n               this.dispatcher.setLoaded(true); // pretend it loaded successfully\n               return of(deductions);\n            })\n          );\n      }),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Clear the Deductions master metadata in cache. Next `getDeductions()` will refresh it.\n   */\n  clearCache() {\n    this.dispatcher.clearCache(); // also clears loaded$ flag\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { EntityHelperService } from './entity-helper.service';\nimport { environment } from '@environment';\nimport { LoggerService } from '@core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./entity-helper.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../../core/services/logger.service\";\nvar deductionsUrl = environment.apiRoot + '/deductions';\nvar DeductionService = /** @class */ (function () {\n    function DeductionService(entityHelper, http, logger) {\n        var _this = this;\n        this.http = http;\n        this.logger = logger;\n        var elements = entityHelper.collectionServiceElementsFactory.create('Deduction');\n        this.dispatcher = elements.dispatcher;\n        this.loaded$ = elements.selectors$.loaded$;\n        this.deductions$ = elements.selectors$.entities$.pipe(withLatestFrom(this.loaded$), switchMap(function (_a) {\n            var deductions = _a[0], loaded = _a[1];\n            return loaded\n                ? of(deductions)\n                : _this.http.get(deductionsUrl).pipe(map(function (newDeductions) {\n                    _this.dispatcher.addAllToCache(newDeductions);\n                    return newDeductions;\n                }), catchError(function (error) {\n                    // Swallow error and return previous deductions (if any)\n                    _this.logger.error('Deductions service failed to return deductions', error);\n                    _this.dispatcher.setLoaded(true); // pretend it loaded successfully\n                    return of(deductions);\n                }));\n        }), shareReplay(1));\n    }\n    /**\n     * Clear the Deductions master metadata in cache. Next `getDeductions()` will refresh it.\n     */\n    DeductionService.prototype.clearCache = function () {\n        this.dispatcher.clearCache(); // also clears loaded$ flag\n    };\n    DeductionService.ngInjectableDef = i0.defineInjectable({ factory: function DeductionService_Factory() { return new DeductionService(i0.inject(i1.EntityHelperService), i0.inject(i2.HttpClient), i0.inject(i3.LoggerService)); }, token: DeductionService, providedIn: \"root\" });\n    return DeductionService;\n}());\nexport { DeductionService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { map } from 'rxjs/operators';\nimport { changeItemFactory as cif } from '@utils';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar ENTITY_EMPLOYEE_DEDUCTION = 'EmployeeDeduction';\nvar EmployeeDeductionService = /** @class */ (function (_super) {\n    __extends(EmployeeDeductionService, _super);\n    function EmployeeDeductionService(helper) {\n        var _this = _super.call(this, 'EmployeeDeduction', helper) || this;\n        _this.helper = helper;\n        /**\n         * Employee Deductions\n         */\n        _this.employeeDeductions$ = _this.entities$;\n        return _this;\n    }\n    EmployeeDeductionService.prototype.getEmployeeDeductions = function (empId) {\n        return this.employeeDeductions$.pipe(map(function (ds) {\n            return ds.filter(function (d) { return d.employeeId === empId; });\n        }));\n    };\n    EmployeeDeductionService.prototype.getDeductionsLinkedTo = function (companyDeductionId) {\n        return this.employeeDeductions$.pipe(map(function (ds) {\n            return ds.filter(function (d) { return d.companyDeductionId === companyDeductionId; });\n        }));\n    };\n    // TODO: Test with real services\n    /**\n     * Multi-entity save of EmployeeDeduction with adds, updates and deletes\n     * @param deductions Array of deductions to add, update, or delete.\n     * Deletes have isRemoved: true\n     * Updates are non-deletes with an id\n     * Adds are non-deletes without an id; will generate that id here.\n     * @returns Terminating observable of ChangeSet that emits when server responds\n     */\n    EmployeeDeductionService.prototype.save = function (deductions) {\n        var _this = this;\n        var deletes = (deductions || []).filter(function (d) { return d.isRemoved === true && d.id; });\n        // Ignore deductions with isRemoved:true but no id because they don't exist on the server\n        // Cannot use ChangeSetOp.Upsert because server does not support it.\n        // Separate non-deletes into updates (have id) and adds (no id)\n        var updates = (deductions || []).filter(function (d) { return d.isRemoved !== true && d.id; });\n        // Identity new deductions by missing id and generate their ids before adding\n        var adds = (deductions || [])\n            .filter(function (d) { return d.isRemoved !== true && !d.id; })\n            .map(function (d) {\n            d.id = _this.helper.generateId();\n            return d;\n        });\n        var changes = [\n            cif.add(ENTITY_EMPLOYEE_DEDUCTION, adds),\n            cif.update(ENTITY_EMPLOYEE_DEDUCTION, updates),\n            cif.delete(ENTITY_EMPLOYEE_DEDUCTION, deletes)\n        ];\n        var changeSet = { changes: changes };\n        return this.saveEntities(changeSet, '/save/employee-deduction');\n    };\n    EmployeeDeductionService.ngInjectableDef = i0.defineInjectable({ factory: function EmployeeDeductionService_Factory() { return new EmployeeDeductionService(i0.inject(i1.CompanyEntityHelperService)); }, token: EmployeeDeductionService, providedIn: \"root\" });\n    return EmployeeDeductionService;\n}(CurrentCompanyEntityCollectionService));\nexport { EmployeeDeductionService };\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { changeItemFactory as cif } from '@utils';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\nimport { EmployeeDeduction } from '@app/model';\r\nimport { ChangeSet } from 'ngrx-data';\r\n\r\n\r\nconst ENTITY_EMPLOYEE_DEDUCTION = 'EmployeeDeduction';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EmployeeDeductionService extends CurrentCompanyEntityCollectionService<EmployeeDeduction> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super('EmployeeDeduction', helper);\r\n  }\r\n  /**\r\n   * Employee Deductions\r\n   */\r\n  readonly employeeDeductions$ = this.entities$;\r\n\r\n  getEmployeeDeductions(empId: string): Observable<EmployeeDeduction[]> {\r\n    return this.employeeDeductions$.pipe(\r\n      map(ds =>\r\n        ds.filter(d => d.employeeId === empId)\r\n      )\r\n    );\r\n  }\r\n\r\n  getDeductionsLinkedTo(companyDeductionId: string): Observable<EmployeeDeduction[]> {\r\n    return this.employeeDeductions$.pipe(\r\n      map(ds =>\r\n        ds.filter(d => d.companyDeductionId === companyDeductionId)\r\n      )\r\n    );\r\n  }\r\n\r\n   // TODO: Test with real services\r\n  /**\r\n   * Multi-entity save of EmployeeDeduction with adds, updates and deletes\r\n   * @param deductions Array of deductions to add, update, or delete.\r\n   * Deletes have isRemoved: true\r\n   * Updates are non-deletes with an id\r\n   * Adds are non-deletes without an id; will generate that id here.\r\n   * @returns Terminating observable of ChangeSet that emits when server responds\r\n   */\r\n  save(deductions: EmployeeDeduction[]): Observable<ChangeSet> {\r\n    const deletes = (deductions || []).filter(d => d.isRemoved === true && d.id);\r\n    // Ignore deductions with isRemoved:true but no id because they don't exist on the server\r\n\r\n    // Cannot use ChangeSetOp.Upsert because server does not support it.\r\n    // Separate non-deletes into updates (have id) and adds (no id)\r\n    const updates = (deductions || []).filter(d => d.isRemoved !== true && d.id);\r\n\r\n    // Identity new deductions by missing id and generate their ids before adding\r\n    const adds = (deductions || [])\r\n    .filter(d => d.isRemoved !== true && !d.id)\r\n    .map(d => {\r\n      d.id = this.helper.generateId();\r\n      return d;\r\n    });\r\n\r\n    const changes = [\r\n      cif.add(ENTITY_EMPLOYEE_DEDUCTION, adds),\r\n      cif.update(ENTITY_EMPLOYEE_DEDUCTION, updates),\r\n      cif.delete(ENTITY_EMPLOYEE_DEDUCTION, deletes)\r\n    ];\r\n    const changeSet: ChangeSet<EmployeeDeduction> = { changes };\r\n\r\n    return this.saveEntities(changeSet, '/save/employee-deduction');\r\n  }\r\n}\r\n"],"sourceRoot":""}