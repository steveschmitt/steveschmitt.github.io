{"version":3,"sources":["webpack:///./src/app/earnings/earnings-catalog.component.html","webpack:///./src/app/earnings/earnings-catalog.component.ts","webpack:///./src/app/earnings/earnings-container.component.html","webpack:///./src/app/earnings/earnings-container.component.ts","webpack:///./src/app/earnings/earnings-default-list.component.html","webpack:///./src/app/earnings/earnings-default-list.component.ts","webpack:///./src/app/earnings/earnings-editor.service.ts","webpack:///./src/app/earnings/earnings-general-editor.component.html","webpack:///./src/app/earnings/earnings-general-editor.component.ts","webpack:///./src/app/earnings/earnings-guard.ts","webpack:///./src/app/earnings/earnings-table.component.html","webpack:///./src/app/earnings/earnings-table.component.ts","webpack:///./src/app/earnings/earnings.module.ts"],"names":[],"mappings":"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","file":"13.64ebeb28c704d5f31a9d.js","sourcesContent":["<div class=\"mr-3\">\r\n  <h3>Add Company Earnings</h3>\r\n\r\n<ng-container *ngIf=\"catalog\">\r\n  <sp-accordion [title]=\"catalogTitle\" [expanded]=\"true\">\r\n    <ul>\r\n      <li *ngFor=\"let category of catalog\" class=\"accordion-menu-item\">\r\n        <span class=\"item-available\" *ngIf=\"category.isActive\" (click)=\"selectType(category)\">+ {{ category.earningTypeName }}</span>\r\n        <span class=\"item-unavailable\" *ngIf=\"!category.isActive\">{{ category.earningTypeName }}</span>\r\n      </li>\r\n    </ul>\r\n  </sp-accordion>\r\n</ng-container>\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { EarningType } from '@model';\r\n\r\n@Component({\r\n  selector: 'sp-earnings-catalog',\r\n  templateUrl: './earnings-catalog.component.html'\r\n})\r\nexport class EarningsCatalogComponent {\r\n  @Input()\r\n  catalog: EarningType[];\r\n\r\n  @Output() earningTypeSelected = new EventEmitter<EarningType>();\r\n  @Output() overviewSelected = new EventEmitter();\r\n\r\n  catalogTitle = 'Additional Earnings';\r\n\r\n  selectType(et: EarningType): void {\r\n    this.earningTypeSelected.emit(et);\r\n  }\r\n  gotoOverview() {\r\n    this.overviewSelected.emit();\r\n  }\r\n}\r\n","<div *ngIf=\"vm.employee\">\r\n  <h2>Earnings</h2>\r\n</div>\r\n  \r\n <p class=\"font-weight-bold\">We have common earning types set up. You can also create additional earnings if these don't apply to your business.</p>\r\n\r\n  <div>\r\n    <sp-default-earnings-list></sp-default-earnings-list>\r\n  </div>\r\n  <div class=\"static-nav d-flex flex-column\" id=\"companyEarnings\">\r\n    <div class=\"layout-split-container\">\r\n      <div class=\"layout-split-menu\">\r\n        <sp-earnings-catalog [catalog]=\"getCatalog()\"\r\n                             (earningTypeSelected)=\"onCatalogSelection($event)\"\r\n                             (overviewSelected)=\"onOverviewSelected()\">\r\n        </sp-earnings-catalog>\r\n      </div>\r\n\r\n      <div class=\"layout-split-content\">\r\n        <router-outlet #outlet=\"outlet\"></router-outlet>\r\n        <sp-earnings-table [showHeader]=\"!vm.showEarningsCards\" *ngIf=\"vm.showEarningsCards\"></sp-earnings-table>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"vm.employee\">\r\n      <button type=\"button\" (click)=\"onReturnEmployeeSelected()\" class=\"btn btn-primary\" id=\"returnToEmployee\">\r\n        <i class=\"material-icons icon\">arrow_forward</i>\r\n        <span>Return to {{vm.employee.firstName}}  {{vm.employee.lastName}}</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { concatMap, first, mapTo } from 'rxjs/operators';\r\n\r\nimport { changeItemFactory as cif } from '@utils';\r\nimport { CompanyService } from '@entity';\r\nimport { EarningsEditorService } from './earnings-editor.service';\r\nimport { EarningType, Employee } from '@model';\r\nimport { environment } from '@environment';\r\nimport { SessionService } from '@session';\r\nimport { WellKnownRoutes } from '@core';\r\n\r\n/** return route to a view within the Employees area */\r\nfunction getRoute(ending: string) {\r\n  return WellKnownRoutes.Employees + '/' + ending;\r\n}\r\n\r\ninterface EarningViewModel {\r\n  employee?: Employee;\r\n  showEarningsCards: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'sp-earnings',\r\n  templateUrl: './earnings-container.component.html'\r\n})\r\n\r\nexport class EarningsContainerComponent implements OnInit {\r\n  vm: EarningViewModel;\r\n\r\n  constructor(\r\n    private companyService: CompanyService,\r\n    private earningsEditorService: EarningsEditorService,\r\n    private router: Router,\r\n    private sessionService: SessionService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const showEarningsCards = !this.router.url.endsWith('/earnings');\r\n\r\n    this.vm = { showEarningsCards };\r\n    this.sessionService.currentEmployee$.pipe(first()).subscribe(ee => this.vm.employee = ee);\r\n  }\r\n\r\n  onCatalogSelection(et: EarningType): void {\r\n    if (et && et.earningTypeName) {\r\n      this.router.navigate([getRoute('earnings/general/' + et.earningTypeName)]);\r\n    }\r\n  }\r\n\r\n  onOverviewSelected() {\r\n    this.router.navigate([getRoute('earnings')]);\r\n  }\r\n\r\n  onReturnEmployeeSelected() {\r\n    if (this.vm.employee) {\r\n      this.router.navigate([`${WellKnownRoutes.Employees}/${this.vm.employee.id}/payment`]);\r\n    }\r\n  }\r\n\r\n  canLeaveAfterSave(): Observable<boolean> {\r\n    return this.save();\r\n  }\r\n  getCatalog(): EarningType[] {\r\n    return this.earningsEditorService.catalog;\r\n  }\r\n\r\n  // Save company.showEarningsTab:true if have CompanyEarnings and company.showEarningsTab is false.\r\n  save(): Observable<boolean> {\r\n    return this.earningsEditorService.companyEarnings.length === 0\r\n      ? of(true) // no earnings => no save\r\n      : this.companyService.currentCompany$.pipe(\r\n        first(),\r\n        concatMap(cachedCompany => {\r\n          if (cachedCompany.showEarningsTab) {\r\n            return of(true); // already true => no save\r\n          } else {\r\n            // save company.showEarningsTab:true\r\n            const chgCompany = { ...cachedCompany, showEarningsTab: true };\r\n            const changes = [cif.update('Company', chgCompany)];\r\n            const saveUrl = environment.apiRoot + '/save/company';\r\n            return this.companyService.saveEntities({ changes }, saveUrl).pipe(mapTo(true));\r\n          }\r\n        })\r\n      );\r\n  }\r\n}\r\n","\r\n<ul class=\"default-earnings-container\" *ngIf=\"vm$ | async as vm\">\r\n  <li class=\"default-earnings-item\" *ngFor=\"let earning of vm\">{{earning.description }}</li>\r\n</ul>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map, first } from 'rxjs/operators';\r\n\r\nimport { Earning, EarningsCategory } from '@app/model';\r\nimport { EarningService } from '@app/store/entity';\r\n\r\n@Component({\r\n  selector: 'sp-default-earnings-list',\r\n  templateUrl: './earnings-default-list.component.html',\r\n})\r\n\r\nexport class DefaultEarningsListComponent implements OnInit {\r\n\r\n  // Default Earnings.\r\n  vm$: Observable<Earning[]>;\r\n\r\n  constructor(\r\n    private earningService: EarningService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.vm$ = this.earningService.earnings$.pipe(first(),\r\n        map(earnings => {\r\n          return earnings.filter(e => e.earningsCategory.toUpperCase() === EarningsCategory.DEFAULTOTHERCOMPENSATION);\r\n        }\r\n        ));\r\n      }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { first, map, tap } from 'rxjs/operators';\r\n\r\nimport { CompanyEarning, Earning, EarningType } from '@app/model';\r\nimport { CompanyEarningService, EarningService } from '@app/store/entity';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EarningsEditorService {\r\n  /** Company Earnings */\r\n  companyEarnings: CompanyEarning[];\r\n  /** Earnings Metadata */\r\n  earnings: Earning[];\r\n  /** Catalog */\r\n  catalog: EarningType[];\r\n\r\n  private currentEarningId: string = null;\r\n\r\n  constructor(\r\n      private earningService: EarningService,\r\n      private companyEarningService: CompanyEarningService\r\n      ) {  }\r\n\r\n  /**\r\n   * Return boolean observable when the\r\n   * deductions master/metadata have been loaded\r\n   * and service is listening for current company deductions\r\n   * (which are cached in this service).\r\n   * Always emits true when ready.\r\n   */\r\n  ready(): Observable<boolean> {\r\n    if (this.earnings) {\r\n      return of(true);\r\n    }\r\n\r\n    return this.earningService.earnings$.pipe(\r\n      first(),\r\n      tap(earnings => {\r\n        this.earnings = earnings.filter(p => !(p.earningTypeName === 'Tips' || p.earningTypeName === 'Clergy'));\r\n\r\n        // No need to unsubscribe because this service never dies\r\n        this.companyEarningService.entities$.subscribe(cerns => {\r\n          this.companyEarnings = cerns.filter(c => c.isRemoved !== true);\r\n          // get earnings catalog\r\n          this.updateCategories(this.earnings, this.companyEarnings);\r\n        });\r\n      }),\r\n      map(() => true)\r\n    );\r\n  }\r\n\r\n    /**\r\n   * Find or create the CompanyDeductionItem for the give Deduction\r\n   * @param deduction Deduction master metadata for this item\r\n   */\r\n  edit(earning: Earning): CompanyEarning {\r\n    const found = this.companyEarnings.find(\r\n      item => item.earningCode === earning.code);\r\n    return found || this.create(earning);\r\n  }\r\n\r\n  create(earningType: Earning): CompanyEarning {\r\n    const item: CompanyEarning = this.companyEarningService.createFromEarning(earningType);\r\n    this.companyEarnings.push(item);\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Return the terminating, multi-entity-save Observable of the new/changed/deleted CompanyDeductions.\r\n   * Must subscribe to execute save; no need to unsubscribe.\r\n   * Cleans cached CompanyDeductionItems immediately, whether or not subscribed.\r\n   */\r\n  save(ern: CompanyEarning): Observable<any> {\r\n    const toSave: CompanyEarning[] = [];\r\n    toSave.push(ern);\r\n    return this.companyEarningService.save(toSave);\r\n  }\r\n\r\n  /**\r\n   Soft-Delete the companyEarning\r\n   * @param ern CompanyEarning\r\n   */\r\n  delete(ern: CompanyEarning): Observable<any> {\r\n    ern.isRemoved = true;\r\n    return this.save(ern); // This does nothing because no subscribe(). What should it do?\r\n  }\r\n\r\n  /**\r\n   * Update earnings catalog when there is any company earning added or deleted\r\n   */\r\n  updateCategories(earnings: Earning[], companyEarnings: CompanyEarning[]): void {\r\n    const earningsType = companyEarnings.map(ce => earnings.find(e => e.code === ce.earningCode).earningTypeId);\r\n\r\n    const earningsTypeCount = earningsType.reduce((acc, current) => {\r\n      return acc.find(ce => ce.earningTypeId === current)\r\n        ? acc.map(a => a.earningTypeId === current ? { ...a, count: a.count + 1 } : a)\r\n        : acc.concat({ earningTypeId: current, count: 1 });\r\n    }, []);\r\n\r\n    const eTypes = earnings.reduce((acc, current) => {\r\n      const { earningTypeId, earningTypeName } = current;\r\n      return acc.find(e => e.earningTypeId === earningTypeId)\r\n        ? acc.map(a => a.earningTypeId === earningTypeId ? { ...a, capacity: a.capacity + 1 } : a)\r\n        : acc.concat({ earningTypeId: earningTypeId, earningTypeName: earningTypeName, capacity: 1 });\r\n    }, []);\r\n\r\n    this.catalog = eTypes.filter(p => p.earningTypeId !== null && p.earningTypeId !== 0)\r\n      .map(e => {\r\n        const found = earningsTypeCount.find(et => et.earningTypeId === e.earningTypeId);\r\n        const isActive = found ? found.count < e.capacity : true;\r\n        return {\r\n          earningTypeId: e.earningTypeId,\r\n          earningTypeName: e.earningTypeName,\r\n          isActive: isActive\r\n        };\r\n      }).sort((a, b) => a.earningTypeName.toLowerCase().localeCompare(b.earningTypeName.toLowerCase()));\r\n  }\r\n  /**\r\n   * Sets the current Company Earning Edit to the passed in Id to indicate the company earning under edit\r\n   * @param companyEarningId\r\n   */\r\n\r\n  setCurrentEarning(companyEarningId: string): void {\r\n    this.currentEarningId = companyEarningId;\r\n  }\r\n  /**\r\n   * Checks whether the passed in company earning id is under edit\r\n   * @param companyEarningId\r\n   */\r\n  isCurrentEarning(companyEarningId: string): boolean {\r\n    return (this.currentEarningId === companyEarningId);\r\n  }\r\n\r\n  /**\r\n   * This method to clear the current earning\r\n   */\r\n  clearCurrentEarning(): void {\r\n    this.currentEarningId = null;\r\n  }\r\n\r\n  /**\r\n   * Return distinct tax types given a list of earnings\r\n   * @param earnings Earnings array\r\n   *\r\n   */\r\n  getDistinctTaxTypes(earnings: Earning[]) {\r\n    return earnings.reduce((acc, current) => {\r\n      const { earningTaxType } = current;\r\n      return acc.find(e => e.earningTaxType === earningTaxType) ? acc : acc.concat({ earningTaxType });\r\n    }, []);\r\n  }\r\n}\r\n","<div *ngIf=\"vm\" class=\"mb-3 earnings-card-editor\">\r\n  <h2>{{vm.title}}</h2>\r\n\r\n  <div style=\"margin-bottom:20px;\">\r\n      <ng-container *ngIf=\"vm.helpNote\">\r\n          <sp-read-more [description]=\"vm.helpNote\">\r\n          </sp-read-more>\r\n      </ng-container>\r\n  </div>\r\n\r\n  <div *ngIf=\"vm.taxTypes.length > 1 && !vm.hideTaxOptions\" class=\"mb-4\">\r\n      <sp-radio-group name=\"earningCode\"[model]=\"vm\" modelType=\"EarningsGeneralEditorModel\" propertyName=\"earningCode\" label=\"Select Type\" class=\"select-indicator-on\">\r\n          <sp-radio-button *ngFor='let earning of getTaxTypesToDisplay()' [value]=\"earning.code\" [id]=\"earning.code\" (click)=\"earningSelected(earning)\">{{earning.taxType}}\r\n              <span *ngIf=\"!isEditMode && earning.taxTypeMax > 1\">({{earning.taxTypeUsed}}/{{earning.taxTypeMax}})</span>\r\n          </sp-radio-button>\r\n      </sp-radio-group>\r\n  </div>\r\n\r\n  <div *ngIf=\"vm.taxTypes.length > 1 && vm.hideTaxOptions\" class=\"mb-4\">\r\n    <label>Type</label>\r\n    <div class=\"text-capitalize\">{{vm.selectedTaxType}}</div>\r\n  </div>\r\n\r\n  <sp-model [model]=\"vm\" modelType=\"EarningsGeneralEditorModel\" group=\"employeeSetup\">\r\n      <div class=\"input-group input-split\">\r\n        <label class=\"inline\">Earning Name</label>\r\n          <sp-input name=\"description\" propertyName=\"description\" placeholder=\"Earning Name\" id=\"description\"></sp-input>\r\n          <label class=\"inline\">Earning Abbreviation</label>\r\n          <sp-input name=\"name\" propertyName=\"name\" placeholder=\"Earning Abbreviation\" id=\"name\"></sp-input>\r\n      </div>\r\n  </sp-model>\r\n\r\n  <div class=\"d-flex mt-4 mb-1 justify-content-end\">\r\n    <button (click)=\"cancel()\" class=\"btn btn-light mr-3\">Cancel</button>\r\n    <button (click)=\"done()\" class=\"btn btn-primary\">Done</button>\r\n  </div>\r\n</div>\r\n\r\n\r\n<style *ngIf=\"earning.taxTypeMax > 1\">\r\n    :host ::ng-deep .multi-choice-option-text{\r\n            padding:0px !important;\r\n            white-space: nowrap !important;\r\n        }\r\n</style>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CompanyEarning, Earning } from '@app/model';\r\nimport { EarningsEditorService } from './earnings-editor.service';\r\nimport { LoggerService, WellKnownRoutes } from '@core';\r\n\r\ninterface EarningsTaxType {\r\n  code: string;\r\n  taxType: string;\r\n  taxTypeUsed: number;\r\n  taxTypeMax: number;\r\n  completed: boolean;\r\n}\r\n/** Private VM class with default values */\r\nclass EarningsGeneralEditorModel {\r\n  title = '';\r\n  helpNote: SafeHtml | null = null;\r\n  description = 'Name';\r\n  name = 'ABBR';\r\n  taxTypes: EarningsTaxType[] = [];\r\n  earningCode = '0';\r\n  hideTaxOptions = false;\r\n  selectedTaxType = '';\r\n}\r\n\r\nconst earningsUrl = WellKnownRoutes.Employees + '/earnings';\r\n\r\n@Component({\r\n  selector: 'sp-earnings-general-editor',\r\n  templateUrl: './earnings-general-editor.component.html'\r\n})\r\nexport class EarningsGeneralEditorComponent implements OnInit {\r\n  private cancelSave = false;\r\n  private currentEarningItem: CompanyEarning;\r\n  private companyEarningId = '';\r\n  companyEarnings: CompanyEarning[];\r\n  earnings: Earning[];\r\n  isEditMode = false;\r\n\r\n  vm = new EarningsGeneralEditorModel();\r\n\r\n  constructor(\r\n    private earningsEditorService: EarningsEditorService,\r\n    private logger: LoggerService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const earnType = this.route.snapshot.params['id'];\r\n    this.companyEarningId = this.route.snapshot.params['code'];\r\n    this.vm.title = earnType;\r\n\r\n    this.earnings = this.earningsEditorService.earnings;\r\n    this.companyEarnings = this.earningsEditorService.companyEarnings;\r\n\r\n    if (this.companyEarningId) {\r\n      this.isEditMode = true;\r\n      this.configureEditorForEditMode(this.companyEarningId);\r\n    } else {\r\n      this.configureEditorForAddMode(this.vm.title);\r\n    }\r\n  }\r\n\r\n  earningSelected(ett: EarningsTaxType): void {\r\n    if (this.isEditMode) {\r\n      this.configureEditorForEditMode(this.companyEarningId, ett.code);\r\n    } else {\r\n      this.configureEditorForAddMode(this.vm.title, ett.code);\r\n    }\r\n  }\r\n\r\n  private configureEditorForEditMode(id: string, codeSelected: string = null) {\r\n    // Get the Company Earning being edited\r\n    this.currentEarningItem = this.companyEarnings.find(\r\n      ce => (ce.id || '').toLowerCase() === id.toLowerCase()\r\n    );\r\n    if (!this.currentEarningItem) {\r\n      this.logErrorAndReturn(`Could not find the Company Earning By Id ${id}`);\r\n      return;\r\n    }\r\n    // Get the earnings information for the given company earning.\r\n    let earningTypeSelected: Earning;\r\n    if (codeSelected === null) {\r\n      earningTypeSelected = this.earnings.find(e => e.code === this.currentEarningItem.earningCode);\r\n    } else {\r\n      earningTypeSelected = this.earnings.find(e => e.code === codeSelected);\r\n    }\r\n    // Making sure we have an earningTypeSelected\r\n    if (!earningTypeSelected) {\r\n      this.logErrorAndReturn(`No earning type found for earning by earning\r\n      code : \"${this.currentEarningItem.earningCode}\" or Code selected: \"${codeSelected}\" `);\r\n      return;\r\n    }\r\n    // Set the ViewModel with the earningtype selected\r\n    this.setViewModel(earningTypeSelected);\r\n    // To get the tax types available for this earning type, we need the earnings with this tax type and selected tax type.\r\n    const earningsAvailable = this.earnings.filter(\r\n      e => e.earningTypeId === earningTypeSelected.earningTypeId\r\n    );\r\n    let selectedTaxType = '';\r\n    if (codeSelected === null) {\r\n      selectedTaxType = earningTypeSelected.earningTaxType;\r\n    } else {\r\n      selectedTaxType =\r\n        (this.earnings.find(e => e.code === this.currentEarningItem.earningCode) || ({} as Earning))\r\n          .earningTaxType || earningTypeSelected.earningTaxType;\r\n    }\r\n    // get the tax types needed for the view model\r\n    this.vm.taxTypes = this.getTaxTypes(\r\n      earningsAvailable,\r\n      this.currentEarningItem.earningCode,\r\n      selectedTaxType,\r\n      true\r\n    );\r\n    this.earningsEditorService.setCurrentEarning(id);\r\n    // Hide Tax Options when less than one item is available\r\n    this.vm.hideTaxOptions =\r\n      this.vm.taxTypes.filter(taxTypes => taxTypes.completed === false).length <= 1;\r\n  }\r\n\r\n  private configureEditorForAddMode(title: string, codeSelected: string = null) {\r\n    const earningsByEarningType = this.earnings.filter(\r\n      e => (e.earningTypeName || '').toLowerCase() === title.toLowerCase()\r\n    );\r\n    const earningCodes = this.companyEarnings\r\n      .filter(ce => ce.id !== null)\r\n      .map(ce => ce.earningCode);\r\n    const ernsAvailable = earningsByEarningType.filter(e => !earningCodes.includes(e.code));\r\n\r\n    let earningTypeSelected: Earning;\r\n\r\n    if (codeSelected === null) {\r\n      // Get the first available earning\r\n      if (ernsAvailable && ernsAvailable.length > 0) {\r\n        earningTypeSelected = ernsAvailable[0];\r\n      }\r\n    } else {\r\n      // Get the earning by codeSelected\r\n      earningTypeSelected = ernsAvailable.find(e => e.code === codeSelected);\r\n    }\r\n    if (!earningTypeSelected) {\r\n      this.logErrorAndReturn(\r\n        `No earning type found for earning by : \"${title}\" or \"${codeSelected}\" `\r\n      );\r\n      return;\r\n    }\r\n    this.currentEarningItem = this.earningsEditorService.edit(earningTypeSelected);\r\n    this.setViewModel(earningTypeSelected);\r\n    this.vm.taxTypes = this.getTaxTypes(\r\n      earningsByEarningType,\r\n      this.vm.earningCode,\r\n      this.vm.selectedTaxType,\r\n      false\r\n    );\r\n    this.vm.hideTaxOptions =\r\n      this.vm.taxTypes.filter(taxTypes => taxTypes.completed === false).length <= 1;\r\n  }\r\n\r\n  private setViewModel(earningTypeSelected: Earning) {\r\n    this.vm.earningCode = earningTypeSelected.code;\r\n    this.vm.selectedTaxType = earningTypeSelected.earningTaxType;\r\n    this.vm.description = this.currentEarningItem.description;\r\n    this.vm.helpNote = earningTypeSelected.shortDescription;\r\n    this.vm.name = this.currentEarningItem.name;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of taxTypes available with max allowed values and current used value\r\n   * @param earnings Earnings List\r\n   * @param selectedCode SelectedCode for this editor\r\n   * @param selectedTaxType Selected TaxType for this editor\r\n   */\r\n  private getTaxTypes(\r\n    earnings: Earning[],\r\n    selectedCode: string,\r\n    selectedTaxType: string,\r\n    isEditMode: boolean\r\n  ): EarningsTaxType[] {\r\n    const companyCodes = this.companyEarnings\r\n      .filter(ce => ce.id !== null)\r\n      .map(ce => ce.earningCode);\r\n\r\n    const distinctTaxTypes = this.earningsEditorService.getDistinctTaxTypes(earnings);\r\n\r\n    const taxTypes: EarningsTaxType[] = distinctTaxTypes.map(taxType => {\r\n      let currentSelectedCode = '';\r\n      const currentTaxTypes = earnings.filter(cp => cp.earningTaxType === taxType.earningTaxType);\r\n      const taxTypesNotInCompany = currentTaxTypes.filter(p => !companyCodes.includes(p.code));\r\n      const maxTaxTypeCount = currentTaxTypes.length;\r\n      let currentTaxTypeCount = maxTaxTypeCount - taxTypesNotInCompany.length;\r\n      let hideTaxType = currentTaxTypeCount === maxTaxTypeCount;\r\n\r\n      if (selectedTaxType === taxType.earningTaxType) {\r\n        currentSelectedCode = selectedCode;\r\n        if (isEditMode) {\r\n          hideTaxType = false;\r\n        } else {\r\n          currentTaxTypeCount++;\r\n        }\r\n      } else {\r\n        currentSelectedCode =\r\n          taxTypesNotInCompany.length > 0 ? taxTypesNotInCompany[0].code : currentTaxTypes[0].code;\r\n      }\r\n\r\n      return {\r\n        code: currentSelectedCode,\r\n        taxType: taxType.earningTaxType,\r\n        taxTypeMax: maxTaxTypeCount,\r\n        taxTypeUsed: currentTaxTypeCount,\r\n        completed: hideTaxType\r\n      };\r\n    });\r\n\r\n    return taxTypes;\r\n  }\r\n\r\n  getTaxTypesToDisplay(): EarningsTaxType[] {\r\n    return this.vm.taxTypes.filter(tax => tax.completed !== true);\r\n  }\r\n\r\n  canLeaveAfterSave(): Observable<any> {\r\n    if (this.cancelSave) {\r\n      this.cancelSave = false;\r\n      return of(true);\r\n    }\r\n    return this.save().pipe(map(e => true));\r\n  }\r\n\r\n  save(): Observable<any> {\r\n    this.earningsEditorService.clearCurrentEarning();\r\n\r\n    if (this.currentEarningItem) {\r\n      // compare vm with cached earning item, only save if changed\r\n      // since only name and description are editable, it is enough to just compare those two properties\r\n      // also include newly added earning with id of null\r\n      const isChanged =\r\n        this.currentEarningItem.name !== this.vm.name ||\r\n        this.currentEarningItem.description !== this.vm.description ||\r\n        this.currentEarningItem.earningCode !== this.vm.earningCode ||\r\n        !this.currentEarningItem.id;\r\n\r\n      if (isChanged) {\r\n        this.currentEarningItem.name = this.vm.name.trim();\r\n        this.currentEarningItem.description = this.vm.description.trim();\r\n        this.currentEarningItem.earningCode = this.vm.earningCode.trim();\r\n        return this.earningsEditorService.save(this.currentEarningItem);\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n\r\n  done(): void {\r\n    this.router.navigate([earningsUrl]);\r\n  }\r\n  cancel(): void {\r\n    this.earningsEditorService.clearCurrentEarning();\r\n    this.cancelSave = true;\r\n    this.router.navigate([WellKnownRoutes.Earnings]);\r\n  }\r\n\r\n  private logErrorAndReturn(message: string) {\r\n    this.logger.error(message);\r\n    this.router.navigate([WellKnownRoutes.Earnings]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivateChild } from '@angular/router';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { EarningsEditorService } from './earnings-editor.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EarningsGuard implements CanActivateChild {\r\n\r\n  constructor(private service: EarningsEditorService) { }\r\n\r\n  canActivateChild(): Observable<boolean> {\r\n    return this.service.ready();\r\n  }\r\n}\r\n","<h3 *ngIf=\"showHeader\">My Company Earnings</h3>\r\n\r\n<ng-container *ngIf=\"vm.length === 0 && showHeader\">\r\n  <div class=\"sp-card sp-card-helper\">\r\n    <img src=\"/assets/images/icon-placeholder-add.png\" height=\"86px\" class=\"mb-3\">\r\n    <span>You have no earnings yet. Select a category on the left and pick an earning.</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<div *ngIf=\"vm.length > 0\">\r\n  <div *ngFor=\"let e of vm\" class=\"sp-card link-cursor\">\r\n    <div class=\"sp-card-content\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <span class=\"sp-card-header\">{{ e.earningTypeName }}</span>\r\n\r\n        <div class=\"sp-card-actions\">\r\n          <a (click)=\"edit(e)\">\r\n            <i id=\"Edit-{{e.earningTypeName}}-{{e.companyEarning.earningCode}}\" class=\"material-icons icon d-inline btn-circle\" title=\"Edit\">edit</i>\r\n          </a>\r\n          <a (click)=\"delete(e)\">\r\n            <i id=\"Delete-{{e.earningTypeName}}-{{e.companyEarning.earningCode}}\" class=\"material-icons icon d-inline btn-circle\" title=\"Remove\">delete_forever</i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <span class=\"sp-card-subheader\">{{e.companyEarning.description }}  &nbsp; &nbsp; {{ e.companyEarning.name }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router} from '@angular/router';\r\n\r\nimport { CompanyEarning, Earning } from '@app/model';\r\nimport { EarningsEditorService } from './earnings-editor.service';\r\n\r\ninterface EarningsTableViewModel {\r\n  companyEarning: CompanyEarning;\r\n  earningTypeName: string;\r\n  earningTypeId: number;\r\n}\r\nconst generalEditorLink = 'general/';\r\n\r\n@Component({\r\n  selector: 'sp-earnings-table',\r\n  templateUrl: './earnings-table.component.html',\r\n})\r\nexport class EarningsTableComponent implements OnInit {\r\n  @Input() showHeader = true;\r\n  vm: EarningsTableViewModel[] = [];\r\n\r\n  constructor(private router: Router,\r\n    private route: ActivatedRoute,\r\n    private earningsEditorService: EarningsEditorService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.vm = this.earningsEditorService.companyEarnings\r\n      .filter(ce => ce.id && !(this.earningsEditorService.isCurrentEarning(ce.id)))\r\n      .map(ce => {\r\n        const ern = this.earningsEditorService.earnings.find(e => e.code === ce.earningCode) || {} as Earning;\r\n        return {\r\n          companyEarning: ce,\r\n          earningTypeName: ern.earningTypeName,\r\n          earningTypeId: ern.earningTypeId\r\n        };\r\n      })\r\n      .sort(this.sortEarnings);\r\n  }\r\n\r\n  edit(e: EarningsTableViewModel) {\r\n    if (e && e.companyEarning) {\r\n      const id = e.companyEarning.id;\r\n      if (e.earningTypeName) {\r\n        if (id) {\r\n          this.router.navigate([generalEditorLink + e.earningTypeName + '/' + id], { relativeTo: this.route });\r\n        } else {\r\n          this.router.navigate([generalEditorLink + e.earningTypeName], { relativeTo: this.route });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  delete(e: EarningsTableViewModel) {\r\n    if (e) {\r\n      this.earningsEditorService.delete(e.companyEarning).subscribe(\r\n        _ => {\r\n          this.vm = this.vm.filter(m => m !== e);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  private sortEarnings(a: EarningsTableViewModel, b: EarningsTableViewModel): number {\r\n    const typeRes = a.earningTypeName.toLowerCase().localeCompare(b.earningTypeName.toLowerCase());\r\n    const nameRes = a.companyEarning.name.toLowerCase().localeCompare(b.companyEarning.name.toLowerCase());\r\n    const desRes = a.companyEarning.description.toLowerCase().localeCompare(b.companyEarning.description.toLowerCase());\r\n\r\n    return typeRes === 0 ? desRes === 0 ? nameRes : desRes : typeRes;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { PageLeaveGuard } from '@core/routing-guards';\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\nimport { DefaultEarningsListComponent } from '@app/earnings/earnings-default-list.component';\r\nimport { EarningsContainerComponent } from '@app/earnings/earnings-container.component';\r\nimport { EarningsCatalogComponent } from '@app/earnings/earnings-catalog.component';\r\nimport { EarningsGeneralEditorComponent } from '@app/earnings/earnings-general-editor.component';\r\nimport { EarningsGuard } from '@app/earnings/earnings-guard';\r\nimport { EarningsTableComponent } from '@app/earnings/earnings-table.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    // Expected full path: ~/employees/earnings\r\n    path: '',\r\n    component: EarningsContainerComponent,\r\n    canActivateChild: [EarningsGuard],\r\n    canDeactivate: [PageLeaveGuard],\r\n    data: { title: 'Earnings' },\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: EarningsTableComponent,\r\n        canDeactivate: [PageLeaveGuard],\r\n        data: { title: 'Company Earnings' },\r\n      },\r\n      {\r\n        path: 'general/:id/:code',  // sample: earnings/Meals/23\r\n        component: EarningsGeneralEditorComponent,\r\n        canDeactivate: [PageLeaveGuard],\r\n        data: { title: 'General Editor' },\r\n      },\r\n      {\r\n        path: 'general/:id',\r\n        component: EarningsGeneralEditorComponent,\r\n        canDeactivate: [PageLeaveGuard],\r\n        data: { title: 'General Editor' },\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [],\r\n  declarations: [\r\n    DefaultEarningsListComponent,\r\n    EarningsContainerComponent,\r\n    EarningsCatalogComponent,\r\n    EarningsTableComponent,\r\n    EarningsGeneralEditorComponent\r\n  ]\r\n})\r\nexport class EarningsModule {}\r\n"],"sourceRoot":""}