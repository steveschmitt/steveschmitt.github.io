{"version":3,"sources":["webpack:///./src/app/deductions/employee/employee-deduction-editor.component.html","webpack:///./src/app/deductions/employee/employee-deduction-editor.component.ts","webpack:///./src/app/deductions/employee/employee-deduction.guard.ts","webpack:///./src/app/deductions/employee/employee-deductions-catalog.component.html","webpack:///./src/app/deductions/employee/employee-deductions-catalog.component.ts","webpack:///./src/app/deductions/employee/employee-deductions-container.component.html","webpack:///./src/app/deductions/employee/employee-deductions-container.component.ts","webpack:///./src/app/deductions/employee/employee-deductions-editor.service.ts","webpack:///./src/app/deductions/employee/employee-deductions-table.component.html","webpack:///./src/app/deductions/employee/employee-deductions-table.component.ts","webpack:///./src/app/deductions/employee/employee-deductions.module.ts","webpack:///./src/app/deductions/employee/employee-retirement.component.html","webpack:///./src/app/deductions/employee/employee-retirement.component.ts"],"names":[],"mappings":"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","file":"21.d44f8f037e800e78e991.js","sourcesContent":["<div>\r\n  Employee Deduction Editor\r\n</div>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sp-employee-deduction-editor',\r\n  templateUrl: './employee-deduction-editor.component.html'\r\n})\r\nexport class EmployeeDeductionEditorComponent implements OnInit, OnDestroy {\r\n  constructor() {\r\n  }\r\n  ngOnInit() {}\r\n  ngOnDestroy() {}\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivateChild } from '@angular/router';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { EmployeeDeductionEditorService } from './employee-deductions-editor.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EmployeeDeductionsGuard implements CanActivateChild {\r\n\r\n  constructor(private service: EmployeeDeductionEditorService) { }\r\n\r\n  canActivateChild(): Observable<boolean> {\r\n    return this.service.ready();\r\n  }\r\n}\r\n","<div>\r\n  <h3>Add Deductions</h3>\r\n  <ng-container *ngIf=\"category\">\r\n    <ul class=\"employee-deduction-catalog\">\r\n      <li *ngFor=\"let title of getListOfDeductionTitles(category.deductionTitles)\"\r\n      class=\"accordion-menu-item\">\r\n        <span *ngIf=\"title.enabled; else notAvailable\"\r\n          class=\"item-available\"\r\n          (click)=\"selectType(title)\">\r\n          <i class=\"material-icons icon\">add</i> {{ title.label }}\r\n        </span>\r\n        <ng-template #notAvailable>\r\n          <span class=\"item-unavailable\">{{ title.label }}</span>\r\n        </ng-template>\r\n      </li>\r\n    </ul>\r\n  </ng-container>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { DeductionCategory,\r\n         DeductionTitle,\r\n         DeductionTitleDictionary } from '@shared/deductions';\r\nimport { dictionaryToArray } from '@core';\r\n\r\n@Component({\r\n  selector: 'sp-employee-deductions-catalog',\r\n  templateUrl: './employee-deductions-catalog.component.html',\r\n})\r\nexport class EmployeeDeductionsCatalogComponent {\r\n  @Input()\r\n  catalog: DeductionCategory[];\r\n\r\n  @Output() deductionTypeSelected = new EventEmitter<DeductionTitle>();\r\n\r\n  get category(): DeductionCategory {\r\n    if (this.catalog && this.catalog.length > 0) {\r\n      return this.catalog[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getListOfDeductionTitles(titles: DeductionTitleDictionary): DeductionTitle[] {\r\n    return dictionaryToArray(titles).sort((a, b) =>  a.order - b.order);\r\n  }\r\n\r\n  selectType(dt: DeductionTitle): void {\r\n    this.deductionTypeSelected.emit(dt);\r\n  }\r\n}\r\n","<div class=\"static-nav d-flex flex-column\" id=\"companyDeductions\">\r\n  <ng-container *ngIf=\"vm.hasCompanyDeductions === false\">\r\n    <div class=\"sp-card sp-card-helper\">\r\n      <span>\r\n        Looks like you don't have any {{ vm.companyKind  }} deductions set up yet.\r\n        You'll need to do that first to add your employee's deductions.\r\n      </span>\r\n    </div>\r\n    <a (click)=\"gotoCompanyDeduction()\">\r\n      Setup {{ vm.companyKind | titlecase }} Deductions ->\r\n    </a>\r\n  </ng-container>\r\n\r\n  <div *ngIf=\"vm.hasCompanyDeductions === true\" class=\"layout-split-container\">\r\n    <div class=\"layout-split-menu\">\r\n      <sp-employee-deductions-catalog\r\n        [catalog]=\"vm.catalog\"\r\n        (deductionTypeSelected)=\"onCatalogSelection($event)\">\r\n      </sp-employee-deductions-catalog>\r\n    </div>\r\n\r\n    <div class=\"layout-split-content\">\r\n      <router-outlet #outlet=\"outlet\"></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { first} from 'rxjs/operators';\r\n\r\nimport { Company, Employee } from '@model';\r\nimport { CompanyService } from '@entity';\r\nimport { DeductionCategory, DeductionTitle } from '@shared/deductions';\r\nimport { EmployeeDeductionEditorService } from './employee-deductions-editor.service';\r\nimport { SessionService } from '@session';\r\nimport { WellKnownRoutes } from '@core';\r\n\r\nclass EmployeeDeductionViewModel {\r\n  catalog: DeductionCategory[] = [];\r\n  companyKind: string;\r\n  hasCompanyDeductions: boolean = null;\r\n}\r\n\r\nconst companyDeductionsUrl = WellKnownRoutes.Employees + '/company-deductions';\r\n\r\n@Component({\r\n  selector: 'sp-employee-deductions',\r\n  templateUrl: './employee-deductions-container.component.html'\r\n})\r\nexport class EmployeeDeductionsContainerComponent implements OnInit {\r\n  company: Company;\r\n  currentEmployee: Employee;\r\n  vm: EmployeeDeductionViewModel = new EmployeeDeductionViewModel();\r\n\r\n  constructor(\r\n    private companyService: CompanyService,\r\n    private editorService: EmployeeDeductionEditorService,\r\n    private router: Router,\r\n    private session: SessionService\r\n    ) {}\r\n\r\n  ngOnInit() {\r\n    this.companyService.currentCompany$.pipe(first()).subscribe(company => {\r\n      this.vm = {\r\n        catalog: this.editorService.companyDeductionCategories,\r\n        companyKind: company.isHousehold ? 'household' : 'company',\r\n        hasCompanyDeductions: this.editorService.hasCompanyDeductions,\r\n      };\r\n    });\r\n\r\n    this.session.currentEmployee$.pipe(first()).subscribe(ee => this.currentEmployee = ee);\r\n  }\r\n\r\n  gotoCompanyDeduction() {\r\n    this.router.navigate([ companyDeductionsUrl ]);\r\n  }\r\n\r\n  onCatalogSelection(dt: DeductionTitle): void {\r\n    if (dt.key === 'Retirements') {\r\n      this.router.navigate([`${this.employeeDeductionsUrl}/retirement`]);\r\n    } else {\r\n      this.router.navigate([`${this.employeeDeductionsUrl}/deduction/${dt.key}`]);\r\n    }\r\n  }\r\n  private get employeeDeductionsUrl(): string {\r\n    return `${WellKnownRoutes.Employees}/${this.currentEmployee.id}/deductions`;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { of, Observable, combineLatest } from 'rxjs';\r\nimport { first, tap, map } from 'rxjs/operators';\r\n\r\nimport { CompanyDeduction, Deduction, EmployeeDeduction } from '@model';\r\nimport { buildInitialCompanyDeductionsCategories,\r\n         CompanyDeductionItem, DeductionCategory,\r\n         getDeductionCategories,\r\n         updateCompanyDeductionCategories } from '@shared/deductions';\r\nimport { CompanyDeductionService,\r\n         DeductionService,\r\n         EmployeeDeductionService } from '@entity';\r\nimport { EmployeeDeductionItem } from './employee-deduction-item';\r\nimport { SessionService } from '@app/store/session';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EmployeeDeductionEditorService {\r\n  employeeDeductionItems: EmployeeDeductionItem[];\r\n  companyDeductionItems: CompanyDeductionItem[];\r\n  deductions: Deduction[];\r\n  deductionCategories: DeductionCategory[];\r\n  companyDeductionCategories: DeductionCategory[];\r\n  hasCompanyDeductions: boolean;\r\n\r\n  constructor(\r\n    private deductionService: DeductionService,\r\n    private companyDeductionService: CompanyDeductionService,\r\n    private employeeDeductionService: EmployeeDeductionService,\r\n    private session: SessionService\r\n  ) {}\r\n\r\n\r\n  /**\r\n   * Return boolean observable when the\r\n   * deductions master/metadata have been loaded\r\n   * and service is listening for current company deductions\r\n   * (which are cached in this service).\r\n   * Always emits true when ready.\r\n   */\r\n  ready(): Observable<boolean> {\r\n    if (this.deductions) {\r\n      return of(true);\r\n    }\r\n\r\n    const empId$ = this.session.currentEmployeeId$;\r\n    const empDed$ = empId$.pipe(\r\n      map(empId =>\r\n        this.employeeDeductionService.getEmployeeDeductions(empId)\r\n      )\r\n    );\r\n\r\n    const cds$ = this.companyDeductionService.entities$;\r\n\r\n    const $ded = this.deductionService.deductions$.pipe(\r\n      first(),\r\n      tap(deductions => {\r\n        this.deductions = deductions;\r\n\r\n        // No need to unsubscribe because this service never dies\r\n        cds$.subscribe(cds => {\r\n          const items = this.mapToItems(cds, this.deductions);\r\n          this.companyDeductionItems = items;\r\n          this.hasCompanyDeductions = items.length > 0;\r\n          this.deductionCategories = getDeductionCategories(deductions);\r\n        });\r\n      })\r\n    );\r\n\r\n    const combo$ = combineLatest(empId$, $ded, cds$, empDed$).pipe(\r\n      map(([empId, ded, cds, employeeDeductions]) => {\r\n        employeeDeductions.subscribe(eds => {\r\n          const items = this.mapToItems(cds, this.deductions);\r\n          this.companyDeductionItems = items;\r\n\r\n          this.companyDeductionCategories =\r\n            this.buildDeductionCategoriesForEmployee(\r\n              this.companyDeductionCategories,\r\n              empId,\r\n              this.companyDeductionItems,\r\n              eds\r\n            );\r\n        });\r\n      })\r\n    );\r\n\r\n    combo$.subscribe();\r\n\r\n    return combo$.pipe(\r\n      map(() => true)\r\n    );\r\n\r\n\r\n\r\n  }\r\n\r\n  // #region private helpers\r\n\r\n  /**\r\n   * Filter categories to show only the deductions selected at the company level.\r\n   * Also set state to elements based on current employee.\r\n   * @param employeeId Current Employee\r\n   * @param cdis Current Company deductions\r\n   * @param employeeDeductions Employee Deduductions\r\n   */\r\n  private buildDeductionCategoriesForEmployee(\r\n    currentState: DeductionCategory[],\r\n    employeeId: string,\r\n    cdis: CompanyDeductionItem[],\r\n    employeeDeductions: EmployeeDeduction[]\r\n    ): DeductionCategory[] {\r\n\r\n    if (!currentState) {\r\n      currentState = buildInitialCompanyDeductionsCategories();\r\n    }\r\n    return updateCompanyDeductionCategories(currentState, cdis, employeeDeductions);\r\n  }\r\n\r\n  /**\r\n   * Map CompanyDeductions into CompanyDeductionItems\r\n   */\r\n  private mapToItems(companyDeductions: CompanyDeduction[], deductions: Deduction[]): CompanyDeductionItem[] {\r\n    // Current Assumption: 1 Company Deduction -> 1 Item Deduction\r\n    return companyDeductions.map(d => {\r\n      const deductionType = deductions.find(md => md.codeTypeId === d.deductionCodeTypeId);\r\n      const item = new CompanyDeductionItem(deductionType, false, [d]);\r\n      return item;\r\n    });\r\n  }\r\n\r\n  // #endregion private helpers\r\n}\r\n","<div>\r\n  Employee deductions table\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoggerService } from '@app/core';\r\nimport { EmployeeDeductionEditorService } from './employee-deductions-editor.service';\r\n\r\n@Component({\r\n  selector: 'sp-employee-deductions-table',\r\n  templateUrl: './employee-deductions-table.component.html'\r\n})\r\nexport class EmployeeDeductionsTableComponent implements OnInit {\r\n\r\n  constructor(private router: Router,\r\n              public editorService: EmployeeDeductionEditorService,\r\n              private log: LoggerService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { PageLeaveGuard } from '@core/routing-guards';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { EmployeeDeductionsContainerComponent } from './employee-deductions-container.component';\nimport { EmployeeDeductionsGuard } from './employee-deduction.guard';\nimport { EmployeeDeductionsCatalogComponent } from './employee-deductions-catalog.component';\nimport { EmployeeDeductionEditorComponent } from './employee-deduction-editor.component';\nimport { EmployeeDeductionsTableComponent } from './employee-deductions-table.component';\nimport { EmployeeRetirementComponent } from './employee-retirement.component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: EmployeeDeductionsContainerComponent,\n    canActivateChild: [EmployeeDeductionsGuard],\n    canDeactivate: [PageLeaveGuard],\n    data: { title: 'Employee Deductions' },\n    children: [\n      {\n        path: '',\n        component: EmployeeDeductionsTableComponent,\n        canDeactivate: [PageLeaveGuard],\n        data: { title: 'Employee Deductions' }\n      },\n      {\n        path: 'retirement',\n        component: EmployeeRetirementComponent,\n        canDeactivate: [PageLeaveGuard],\n        data: { title: 'Company Retirement Plan' }\n      },\n      {\n        path: 'deduction/:id/:code', // sample: deduction/Miscellaneous+No+Goal/2\n        component: EmployeeDeductionEditorComponent,\n        canDeactivate: [PageLeaveGuard],\n        data: {}\n      },\n      {\n        path: 'deduction/:id', // sample: deduction/Medical\n        component: EmployeeDeductionEditorComponent,\n        canDeactivate: [PageLeaveGuard],\n        data: {}\n      }\n    ]\n  },\n\n];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [\n    EmployeeDeductionsContainerComponent,\n    EmployeeRetirementComponent,\n    EmployeeDeductionsTableComponent,\n    EmployeeDeductionsCatalogComponent,\n    EmployeeDeductionEditorComponent\n  ]\n})\nexport class EmployeeDeductionsModule {}\n","<div>\r\n  Employee Retirement Component: TODO\r\n</div>\r\n<!-- Code moved from Company Retirement Component to\r\nEmployee Retirement Component.\r\nWill use this in next set of changes.\r\n-->\r\n\r\n<!--\r\n      <sp-radio-group *ngIf=\"vm.plan === RetirementPlans.Plan401K &&\r\n          (vm.planType === RetirementPlanTypes.P401KTraditional ||\r\n            vm.planType === RetirementPlanTypes.P401KSafeHarbor)\"\r\n          name=\"planPreOrRoth\" propertyName=\"planPreOrRoth\"\r\n          (change)=\"configureEditor()\"\r\n          label=\"Apply\"\r\n          tooltip=\"true\">\r\n        <span tooltipText class=\"label-tooltip\">\r\n          Select where to apply the plan: Pre-Tax or Post-Tax (Roth).\r\n        </span>\r\n        <sp-radio-button id=\"ptPreTax\" [value]=\"RetirementPlanApply.PreTax\">Pre-Tax</sp-radio-button>\r\n        <sp-radio-button id=\"ptPostTax\" [value]=\"RetirementPlanApply.PostTax\">Post-Tax (Roth)</sp-radio-button>\r\n      </sp-radio-group>\r\n\r\n\r\n      <sp-radio-group  *ngIf=\"vm.plan === RetirementPlans.Plan401K\"\r\n          name=\"matchType\" propertyName=\"matchType\" label=\"Company Match\" tooltip=\"true\">\r\n        <span tooltipText class=\"label-tooltip\">\r\n          Select the match type used by your company.\r\n        </span>\r\n        <sp-radio-button id=\"matchNoMatch\" [value]=\"MatchTypes.NoMatch\">No Match</sp-radio-button>\r\n        <sp-radio-button id=\"matchSingleTier\" [value]=\"MatchTypes.SingleTier\">Single Tier</sp-radio-button>\r\n        <sp-radio-button id=\"matchTwoTier\" [value]=\"MatchTypes.TwoTiers\">Two Tiers</sp-radio-button>\r\n      </sp-radio-group>\r\n\r\n      <sp-radio-group  *ngIf=\"vm.plan === RetirementPlans.Plan403B\"\r\n        name=\"matchType\" propertyName=\"matchType\" label=\"Company Match\" tooltip=\"true\">\r\n        <span tooltipText class=\"label-tooltip\">\r\n          Select the match type used by your company.\r\n        </span>\r\n        <sp-radio-button id=\"matchNoMatch\" [value]=\"MatchTypes.NoMatch\">No Match</sp-radio-button>\r\n        <sp-radio-button id=\"matchSingleTier\" [value]=\"MatchTypes.SingleTier\">Single Tier</sp-radio-button>\r\n      </sp-radio-group>\r\n\r\n      <div *ngIf=\"vm.matchType === MatchTypes.NoMatch\">\r\n        Company No Match means contributions will be done by employers gross earnings only.\r\n      </div>\r\n\r\n      <div *ngIf=\"vm.matchType === MatchTypes.SingleTier ||\r\n                           vm.matchType === MatchTypes.TwoTiers\">\r\n        <span>Match</span>\r\n        <sp-input name=\"matchTierMinPercent\" [propertyName]=\"matchTierMinPercent\"\r\n                  maskType=\"percent\" class=\"percent-inline\">\r\n        </sp-input>\r\n        <span> of employee contribution up to:</span>\r\n        <sp-amount-or-percent-value [model]=\"vm\"\r\n                                  isAmountPropertyName=\"isTierMinAmount\"\r\n                                  propertyNameValue=\"tierMinValue\"\r\n                                  class=\"aop-inline\">\r\n        </sp-amount-or-percent-value>\r\n        <span> of employee gross earnings.</span>\r\n      </div>\r\n\r\n      <div *ngIf=\"vm.matchType === MatchTypes.TwoTiers\">\r\n        Two tiers. TODO\r\n      </div>\r\n\r\n      <div *ngIf=\"vm.plan === RetirementPlans.Plan401K\">\r\n        <label>Match Amount by Pay Period</label>\r\n        <sp-amount-or-percent-value [model]=\"vm\"\r\n                                    isAmountPropertyName=\"isMatchAmount\"\r\n                                    propertyNameValue=\"matchValue\">\r\n        </sp-amount-or-percent-value>\r\n      </div>\r\n\r\n      <div *ngIf=\"vm.plan === RetirementPlans.Plan401K\">\r\n        <label>Maximun Match of Employee Gross Payment</label>\r\n        <sp-amount-or-percent-value [model]=\"vm\"\r\n                                    isAmountPropertyName=\"isGrossAmount\"\r\n                                    propertyNameValue=\"matchGrossValue\">\r\n        </sp-amount-or-percent-value>\r\n      </div>\r\n\r\n      <div *ngIf=\"vm.plan === RetirementPlans.Plan401K\">\r\n        <sp-radio-group name=\"hasPlanYearMax\" propertyName=\"hasPlanYearMax\"\r\n                        label=\"Do you have a plan year maximun?\">\r\n          <sp-radio-button id=\"planYearMaxNo\" [value]=\"false\">No</sp-radio-button>\r\n          <sp-radio-button id=\"planYearMaxYes\" [value]=\"true\">Yes</sp-radio-button>\r\n        </sp-radio-group>\r\n\r\n        <div>\r\n            <sp-input *ngIf=\"vm.hasPlanYearMax\"\r\n                      label=\"Plan Year Maximum Amount\"\r\n                      name=\"planYearMaxValue\" propertyName=\"planYearMaxValue\"\r\n                      maskType=\"currency\"\r\n                      class=\"currency-amount\">\r\n            </sp-input>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mt-5\" *ngIf=\"getEmployeeContributionMode() as contrib\">\r\n        <h2>Employee Contribution Type</h2>\r\n        <p *ngIf=\"contrib === EmployeeContributionModel.Both\">\r\n          Employees may choose Pre-Tax or Post-Tax contributions.\r\n        </p>\r\n        <p *ngIf=\"contrib === EmployeeContributionModel.PreTax\">\r\n          Employees contributions are Pre-Tax only.\r\n        </p>\r\n        <p *ngIf=\"contrib === EmployeeContributionModel.PostTax\">\r\n          Employees contributions are Post-Tax (Roth) only.\r\n        </p>\r\n      </div>\r\n\r\n      <div *ngIf=\"showAdditionalPlans\" class=\"mt-4\">\r\n        <h3>Additional Plan Deductions</h3>\r\n        <sp-radio-group name=\"allowCatchup\" propertyName=\"allowCatchup\"\r\n              label='Do you allow employees over 50 years old to make \"catchup payments\" to the plan?'>\r\n          <sp-radio-button id=\"allowCatchupNo\" [value]=\"false\">No</sp-radio-button>\r\n          <sp-radio-button id=\"allowCatchupYes\" [value]=\"true\">Yes</sp-radio-button>\r\n        </sp-radio-group>\r\n        <div *ngIf=\"vm.allowCatchup\" class=\"deduction-name\">\r\n          <label class=\"inline\">Catch Up Plan Name</label>\r\n          <sp-input [model]=\"vm\" modelType=\"Retirement\" propertyName=\"catchupName\"\r\n                    [disabled]=\"!vm.canChangeCatchupName\">\r\n          </sp-input>\r\n          <label class=\"inline\">Catch Up Plan Abbreviation</label>\r\n          <sp-input [model]=\"vm\" modelType=\"Retirement\" propertyName=\"catchupAbbreviation\"\r\n                    class=\"input-abbreviation\"\r\n                    [disabled]=\"!vm.canChangeCatchupAbbreviation\">\r\n          </sp-input>\r\n\r\n          <div class=\"mt-3\">\r\n            <sp-radio-group name=\"matchCatchUpContribution\" propertyName=\"matchCatchUpContribution\"\r\n                            label=\"Do you match catch-up contribution?\">\r\n              <sp-radio-button id=\"matchCatchUpContributionNo\" [value]=\"false\">No</sp-radio-button>\r\n              <sp-radio-button id=\"matchCatchUpContributionYes\" [value]=\"true\">Yes</sp-radio-button>\r\n            </sp-radio-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n-->\r\n\r\n","import { OnInit, Component } from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\nimport { RetirementPlans, RetirementPlanTypes,\r\n         MatchTypes, RetirementPlanApply\r\n       } from '@app/model';\r\n\r\ninterface EmployeeRetirement {\r\n  retirementTypeName: string;\r\n  plan: RetirementPlans;\r\n  planType: RetirementPlanTypes;\r\n  matchType: MatchTypes;\r\n  planPreOrRoth: RetirementPlanApply;\r\n  htmlDescription: SafeHtml | null;\r\n  name: string;\r\n  abbreviation: string;\r\n  canChangeName: boolean;\r\n  canChangeAbbreviation: boolean;\r\n  isMatchAmount?: boolean;\r\n  matchValue?: number;\r\n  isGrossAmount?: boolean;\r\n  matchGrossValue?: number;\r\n  hasPlanYearMax?: boolean;\r\n  planYearMaxValue?: number;\r\n  allowCatchup?: boolean;\r\n  catchupName?: string;\r\n  catchupAbbreviation?: string;\r\n  canChangeCatchupName: boolean;\r\n  canChangeCatchupAbbreviation: boolean;\r\n  matchTierMinPercent?: number;\r\n  isTierMinAmount?: boolean;\r\n  tierMinValue?: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'sp-employee-retirement',\r\n  templateUrl: './employee-retirement.component.html'\r\n})\r\nexport class EmployeeRetirementComponent implements OnInit {\r\n  constructor() {\r\n\r\n  }\r\n  ngOnInit() {\r\n  }\r\n\r\n  configureEditor() {}\r\n}\r\n"],"sourceRoot":""}