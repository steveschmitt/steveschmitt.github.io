{"version":3,"sources":["webpack:///./src/app/store/entity/entity-services/household-filers.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/household-filers.service.ts","webpack:///./src/app/store/entity/entity-services/company-deduction.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/company-deduction.service.ts","webpack:///./src/app/store/entity/entity-services/ancillary.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/ancillary.service.ts","webpack:///./src/app/store/entity/entity-services/user.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/user.service.ts","webpack:///./src/app/store/entity/entity-services/employee-payment-method.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/employee-payment-method.service.ts","webpack:///./src/app/store/entity/entity-services/envelope.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/index.ts","webpack:///./src/app/store/entity/entity-services/company-earning.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/company-earning.service.ts","webpack:///./src/app/store/entity/entity-services/employee.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/employee.service.ts","webpack:///./src/app/store/entity/entity-services/company-ancillary.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/company-ancillary.service.ts","webpack:///./src/app/store/entity/entity-services/envelope-user.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/envelope-user.service.ts","webpack:///./src/app/store/entity/entity-services/deduction.service.ts","webpack:///./src/app/store/entity/entity-services/deduction.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/employee-deduction.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/employee-deduction.service.ts","webpack:///./src/app/store/entity/entity-services/document.service.ts.pre-build-optimizer.js","webpack:///./src/app/store/entity/entity-services/document.service.ts"],"names":["__webpack_require__","d","__webpack_exports__","HouseholdFilersService","extendStatics","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","_current_company_entity_collection_service__WEBPACK_IMPORTED_MODULE_2__","_model__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","_company_entity_helper_service__WEBPACK_IMPORTED_MODULE_5__","_session_session_service__WEBPACK_IMPORTED_MODULE_6__","__extends","Object","setPrototypeOf","__proto__","Array","b","p","hasOwnProperty","__","this","constructor","prototype","create","_super","helper","sessionService","_this","call","defineProperty","get","entities$","currentCompanyId$","pipe","_a","companyId","find","f","createNewRecord","enumerable","configurable","ngInjectableDef","factory","token","providedIn","CompanyDeductionService","_utils__WEBPACK_IMPORTED_MODULE_0__","_model__WEBPACK_IMPORTED_MODULE_1__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_company_entity_helper_service__WEBPACK_IMPORTED_MODULE_4__","ENTITY_COMPANY_DEDUCTION","companyDeductions$","createFromDeduction","deduction","Error","save","deductions","deletes","filter","isRemoved","id","updates","adds","map","generateId","changes","add","update","delete","saveEntities","AncillaryService","ngrx_data__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_company_entity_helper_service__WEBPACK_IMPORTED_MODULE_2__","collectionServiceElementsFactory","UserService","rxjs__WEBPACK_IMPORTED_MODULE_1__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_company_entity_helper_service__WEBPACK_IMPORTED_MODULE_3__","currentUserId$","currentUser$","readOnly$","addUser","newUser","EmployeePaymentMethodService","_current_company_entity_collection_service__WEBPACK_IMPORTED_MODULE_0__","review_service","CompanyEarningService","_environment__WEBPACK_IMPORTED_MODULE_3__","ENTITY_COMPANY_EARNING","companyEarnings$","createFromEarning","earning","earnings","apiRoot","EmployeeService","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","_utils__WEBPACK_IMPORTED_MODULE_5__","_current_company_entity_collection_service__WEBPACK_IMPORTED_MODULE_6__","_environment__WEBPACK_IMPORTED_MODULE_7__","_angular_core__WEBPACK_IMPORTED_MODULE_8__","_entity_selectors__WEBPACK_IMPORTED_MODULE_9__","_company_entity_helper_service__WEBPACK_IMPORTED_MODULE_10__","_core_services_tax_services_tax_collector_service__WEBPACK_IMPORTED_MODULE_11__","entitySelectors","taxCollectorService","saveNewEmployee","ee","home","epay","_","saveEmployeeUpdate","saveEmployeeIsRemovedById","eeId","entityMap$","eeMap","saveEmployeeIsRemoved","home$","address","addrs","a","homeAddressId","payment$","employeePaymentMethod","pms","pm","employeeId","payment","push","computeTaxes","CompanyAncillaryService","url","options","entityCacheDispatcher","EnvelopeSignerService","DeductionService","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_environment__WEBPACK_IMPORTED_MODULE_6__","_angular_core__WEBPACK_IMPORTED_MODULE_7__","_entity_helper_service__WEBPACK_IMPORTED_MODULE_8__","_angular_common_http__WEBPACK_IMPORTED_MODULE_9__","_core_services_logger_service__WEBPACK_IMPORTED_MODULE_10__","deductionsUrl","entityHelper","http","logger","elements","dispatcher","loaded$","selectors$","deductions$","newDeductions","addAllToCache","error","setLoaded","clearCache","EmployeeDeductionService","rxjs_operators__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","employeeDeductions$","getEmployeeDeductions","empId","ds","getDeductionsLinkedTo","companyDeductionId","DocumentService","_environment__WEBPACK_IMPORTED_MODULE_1__","_angular_common_http__WEBPACK_IMPORTED_MODULE_4__","_core_services_busy_service__WEBPACK_IMPORTED_MODULE_5__","busyService","getDocPdf","docId","busy$","responseType"],"mappings":"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","file":"4.ad536fe41741ee525b8c.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport { HouseholdFilers } from '@model';\nimport { SessionService } from '@session';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nimport * as i2 from \"../../session/session.service\";\nvar HouseholdFilersService = /** @class */ (function (_super) {\n    __extends(HouseholdFilersService, _super);\n    function HouseholdFilersService(helper, sessionService) {\n        var _this = _super.call(this, 'HouseholdFilers', helper) || this;\n        _this.helper = helper;\n        _this.sessionService = sessionService;\n        return _this;\n    }\n    Object.defineProperty(HouseholdFilersService.prototype, \"householdFilers$\", {\n        get: function () {\n            var _this = this;\n            return combineLatest(this.entities$, this.sessionService.currentCompanyId$).pipe(map(function (_a) {\n                var filersCollection = _a[0], companyId = _a[1];\n                return filersCollection.find(function (f) { return f.companyId === companyId; }) ||\n                    _this.createNewRecord(companyId); // not found, create one\n            }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    HouseholdFilersService.prototype.createNewRecord = function (companyId) {\n        if (!companyId) {\n            return null;\n        }\n        var res = new HouseholdFilers(null, companyId);\n        return res;\n    };\n    HouseholdFilersService.ngInjectableDef = i0.defineInjectable({ factory: function HouseholdFilersService_Factory() { return new HouseholdFilersService(i0.inject(i1.CompanyEntityHelperService), i0.inject(i2.SessionService)); }, token: HouseholdFilersService, providedIn: \"root\" });\n    return HouseholdFilersService;\n}(CurrentCompanyEntityCollectionService));\nexport { HouseholdFilersService };\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\nimport { HouseholdFilers } from '@model';\r\nimport { SessionService } from '@session';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class HouseholdFilersService extends CurrentCompanyEntityCollectionService<HouseholdFilers> {\r\n  constructor(\r\n    protected helper: CompanyEntityHelperService,\r\n    protected sessionService: SessionService\r\n  ) {\r\n    super('HouseholdFilers', helper);\r\n  }\r\n\r\n  get householdFilers$(): Observable<HouseholdFilers> {\r\n    return combineLatest(\r\n      this.entities$,\r\n      this.sessionService.currentCompanyId$\r\n    ).pipe(\r\n      map( ([filersCollection, companyId]) => {\r\n        return filersCollection.find(f => f.companyId === companyId) ||\r\n          this.createNewRecord(companyId);  // not found, create one\r\n      })\r\n    );\r\n  }\r\n\r\n  private createNewRecord(companyId: string): HouseholdFilers {\r\n    if (!companyId) {\r\n      return null;\r\n    }\r\n    const res = new HouseholdFilers(null, companyId);\r\n    return res;\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { changeItemFactory as cif } from '@utils';\nimport { CompanyDeduction } from '@model';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar ENTITY_COMPANY_DEDUCTION = 'CompanyDeduction';\nvar CompanyDeductionService = /** @class */ (function (_super) {\n    __extends(CompanyDeductionService, _super);\n    function CompanyDeductionService(helper) {\n        var _this = _super.call(this, ENTITY_COMPANY_DEDUCTION, helper) || this;\n        _this.helper = helper;\n        /**\n         * Company Deductions\n         */\n        _this.companyDeductions$ = _this.entities$;\n        return _this;\n    }\n    /**\n     * Create new CompanyDeduction from a deduction master.\n     * The id is empty because will save with upsert.\n     */\n    CompanyDeductionService.prototype.createFromDeduction = function (deduction) {\n        if (!deduction) {\n            throw new Error('deduction is null');\n        }\n        return this.create(new CompanyDeduction(deduction));\n    };\n    // TODO: Test with real services\n    /**\n     * Multi-entity save of CompanyDeduction with adds, updates and deletes\n     * @param deductions Array of deductions to add, update, or delete.\n     * Deletes have isRemoved: true\n     * Updates are non-deletes with an id\n     * Adds are non-deletes without an id; will generate that id here.\n     * @returns Terminating observable of ChangeSet that emits when server responds\n     */\n    CompanyDeductionService.prototype.save = function (deductions) {\n        var _this = this;\n        var deletes = deductions.filter(function (d) { return d.isRemoved === true && d.id; });\n        // Ignore deductions with isRemoved:true but no id because they don't exist on the server\n        // Cannot use ChangeSetOp.Upsert because server does not support it.\n        // Separate non-deletes into updates (have id) and adds (no id)\n        var updates = deductions.filter(function (d) { return d.isRemoved !== true && d.id; });\n        // Identity new deductions by missing id and generate their ids before adding\n        var adds = deductions\n            .filter(function (d) { return d.isRemoved !== true && !d.id; })\n            .map(function (d) {\n            d.id = _this.helper.generateId();\n            return d;\n        });\n        var changes = [\n            cif.add(ENTITY_COMPANY_DEDUCTION, adds),\n            cif.update(ENTITY_COMPANY_DEDUCTION, updates),\n            cif.delete(ENTITY_COMPANY_DEDUCTION, deletes)\n        ];\n        var changeSet = { changes: changes };\n        return this.saveEntities(changeSet, '/save/company-deduction');\n    };\n    CompanyDeductionService.ngInjectableDef = i0.defineInjectable({ factory: function CompanyDeductionService_Factory() { return new CompanyDeductionService(i0.inject(i1.CompanyEntityHelperService)); }, token: CompanyDeductionService, providedIn: \"root\" });\n    return CompanyDeductionService;\n}(CurrentCompanyEntityCollectionService));\nexport { CompanyDeductionService };\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ChangeSet } from 'ngrx-data';\r\nimport { changeItemFactory as cif } from '@utils';\r\n\r\nimport { CompanyDeduction, Deduction } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\n\r\nconst ENTITY_COMPANY_DEDUCTION = 'CompanyDeduction';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CompanyDeductionService extends CurrentCompanyEntityCollectionService<CompanyDeduction> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super(ENTITY_COMPANY_DEDUCTION, helper);\r\n  }\r\n  /**\r\n   * Company Deductions\r\n   */\r\n  readonly companyDeductions$ = this.entities$;\r\n\r\n  /**\r\n   * Create new CompanyDeduction from a deduction master.\r\n   * The id is empty because will save with upsert.\r\n   */\r\n  createFromDeduction(deduction: Deduction): CompanyDeduction {\r\n    if (!deduction) {\r\n      throw new Error('deduction is null');\r\n    }\r\n    return this.create(new CompanyDeduction(deduction));\r\n  }\r\n\r\n  // TODO: Test with real services\r\n  /**\r\n   * Multi-entity save of CompanyDeduction with adds, updates and deletes\r\n   * @param deductions Array of deductions to add, update, or delete.\r\n   * Deletes have isRemoved: true\r\n   * Updates are non-deletes with an id\r\n   * Adds are non-deletes without an id; will generate that id here.\r\n   * @returns Terminating observable of ChangeSet that emits when server responds\r\n   */\r\n  save(deductions: CompanyDeduction[]): Observable<ChangeSet> {\r\n    const deletes = deductions.filter(d => d.isRemoved === true && d.id);\r\n    // Ignore deductions with isRemoved:true but no id because they don't exist on the server\r\n\r\n    // Cannot use ChangeSetOp.Upsert because server does not support it.\r\n    // Separate non-deletes into updates (have id) and adds (no id)\r\n    const updates = deductions.filter(d => d.isRemoved !== true && d.id);\r\n\r\n    // Identity new deductions by missing id and generate their ids before adding\r\n    const adds = deductions\r\n    .filter(d => d.isRemoved !== true && !d.id)\r\n    .map(d => {\r\n      d.id = this.helper.generateId();\r\n      return d;\r\n    });\r\n\r\n    const changes = [\r\n      cif.add(ENTITY_COMPANY_DEDUCTION, adds),\r\n      cif.update(ENTITY_COMPANY_DEDUCTION, updates),\r\n      cif.delete(ENTITY_COMPANY_DEDUCTION, deletes)\r\n    ];\r\n    const changeSet: ChangeSet<CompanyDeduction> = { changes };\r\n\r\n    return this.saveEntities(changeSet, '/save/company-deduction');\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { EntityCollectionServiceBase } from 'ngrx-data';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar AncillaryService = /** @class */ (function (_super) {\n    __extends(AncillaryService, _super);\n    function AncillaryService(helper) {\n        var _this = _super.call(this, 'Ancillary', helper.collectionServiceElementsFactory) || this;\n        _this.helper = helper;\n        return _this;\n    }\n    AncillaryService.ngInjectableDef = i0.defineInjectable({ factory: function AncillaryService_Factory() { return new AncillaryService(i0.inject(i1.CompanyEntityHelperService)); }, token: AncillaryService, providedIn: \"root\" });\n    return AncillaryService;\n}(EntityCollectionServiceBase));\nexport { AncillaryService };\n","import { Injectable } from '@angular/core';\r\nimport { EntityCollectionServiceBase } from 'ngrx-data';\r\nimport { Ancillary } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AncillaryService extends EntityCollectionServiceBase<Ancillary> {\r\n  constructor(private helper: CompanyEntityHelperService) {\r\n    super('Ancillary', helper.collectionServiceElementsFactory);\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { EntityCollectionServiceBase } from 'ngrx-data';\nimport { throwError } from 'rxjs';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { User } from '@model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar UserService = /** @class */ (function (_super) {\n    __extends(UserService, _super);\n    function UserService(helper) {\n        var _this = _super.call(this, 'User', helper.collectionServiceElementsFactory) || this;\n        _this.helper = helper;\n        /**\n         * Observable of the id of the current user for this account\n         * Not necessarily the authenticated user who could be an admin acting on the current user's behalf.\n         */\n        _this.currentUserId$ = _this.helper.currentUserId$;\n        /**\n         * Observable of the current user for this account\n         * Not necessarily the authenticated user who could be an admin acting on the current user's behalf.\n         */\n        _this.currentUser$ = _this.helper.currentUser$;\n        /** emits true when the current company is \"read-only\" and saves are disallowed. */\n        _this.readOnly$ = _this.helper.readOnly$;\n        return _this;\n    }\n    /**\n     * Add a new user.\n     * NB: this user is not made the current user\n     * @param newUser Data for a new user\n     */\n    UserService.prototype.addUser = function (newUser) {\n        return throwError('Do not call add. Create a User through sign-up');\n    };\n    UserService.ngInjectableDef = i0.defineInjectable({ factory: function UserService_Factory() { return new UserService(i0.inject(i1.CompanyEntityHelperService)); }, token: UserService, providedIn: \"root\" });\n    return UserService;\n}(EntityCollectionServiceBase));\nexport { UserService };\n","import { Injectable } from '@angular/core';\r\nimport { EntityCollectionServiceBase } from 'ngrx-data';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { User, UserRole } from '@model';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class UserService extends EntityCollectionServiceBase<User> {\r\n  constructor(private helper: CompanyEntityHelperService) {\r\n    super('User', helper.collectionServiceElementsFactory);\r\n  }\r\n\r\n  /**\r\n   * Observable of the id of the current user for this account\r\n   * Not necessarily the authenticated user who could be an admin acting on the current user's behalf.\r\n   */\r\n  currentUserId$ = this.helper.currentUserId$;\r\n\r\n  /**\r\n   * Observable of the current user for this account\r\n   * Not necessarily the authenticated user who could be an admin acting on the current user's behalf.\r\n   */\r\n  currentUser$ = this.helper.currentUser$;\r\n\r\n  /** emits true when the current company is \"read-only\" and saves are disallowed. */\r\n  readOnly$ = this.helper.readOnly$;\r\n\r\n  /**\r\n   * Add a new user.\r\n   * NB: this user is not made the current user\r\n   * @param newUser Data for a new user\r\n   */\r\n  addUser(newUser: User): Observable<User> {\r\n    return throwError('Do not call add. Create a User through sign-up');\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar EmployeePaymentMethodService = /** @class */ (function (_super) {\n    __extends(EmployeePaymentMethodService, _super);\n    function EmployeePaymentMethodService(helper) {\n        var _this = _super.call(this, 'EmployeePaymentMethod', helper) || this;\n        _this.helper = helper;\n        return _this;\n    }\n    EmployeePaymentMethodService.ngInjectableDef = i0.defineInjectable({ factory: function EmployeePaymentMethodService_Factory() { return new EmployeePaymentMethodService(i0.inject(i1.CompanyEntityHelperService)); }, token: EmployeePaymentMethodService, providedIn: \"root\" });\n    return EmployeePaymentMethodService;\n}(CurrentCompanyEntityCollectionService));\nexport { EmployeePaymentMethodService };\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EmployeePaymentMethod } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EmployeePaymentMethodService extends CurrentCompanyEntityCollectionService<EmployeePaymentMethod> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super('EmployeePaymentMethod', helper);\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar EnvelopeService = /** @class */ (function (_super) {\n    __extends(EnvelopeService, _super);\n    function EnvelopeService(helper) {\n        var _this = _super.call(this, 'Envelope', helper) || this;\n        _this.helper = helper;\n        return _this;\n    }\n    EnvelopeService.ngInjectableDef = i0.defineInjectable({ factory: function EnvelopeService_Factory() { return new EnvelopeService(i0.inject(i1.CompanyEntityHelperService)); }, token: EnvelopeService, providedIn: \"root\" });\n    return EnvelopeService;\n}(CurrentCompanyEntityCollectionService));\nexport { EnvelopeService };\n","export * from './entity-dispatcher';\r\nexport * from './entity-selectors';\r\nexport * from './entity-services';\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { changeItemFactory as cif } from '@utils';\nimport { CompanyEarning } from '@model';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport { environment } from '@environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar ENTITY_COMPANY_EARNING = 'CompanyEarning';\nvar CompanyEarningService = /** @class */ (function (_super) {\n    __extends(CompanyEarningService, _super);\n    function CompanyEarningService(helper) {\n        var _this = _super.call(this, ENTITY_COMPANY_EARNING, helper) || this;\n        _this.helper = helper;\n        /**\n         * Company Earnings\n         */\n        _this.companyEarnings$ = _this.entities$;\n        return _this;\n    }\n    /**\n     * Create a new CompanyEarning from a earning master.\n     * The id is empty because will save with upsert.\n     */\n    CompanyEarningService.prototype.createFromEarning = function (earning) {\n        if (!earning) {\n            throw new Error('earning is null');\n        }\n        return this.create(new CompanyEarning(earning));\n    };\n    /**\n     * Multi-entity save of CompanyEarning with adds, updates and deletes\n     * @param companyEarning Array of earnings to add, update, or delete.\n     * Updates are items with an id, to delete set isRemoved to true\n     * Adds are items without an id; will generate that id here.\n     * @returns Terminating observable of ChangeSet that emits when server responds\n     */\n    CompanyEarningService.prototype.save = function (earnings) {\n        var _this = this;\n        // Cannot use ChangeSetOp.Upsert because server does not support it.\n        // Separate non-deletes into updates (have id) and adds (no id)\n        var updates = earnings.filter(function (d) { return d.id; });\n        // Identity new earnings by missing id and generate their ids before adding\n        var adds = earnings\n            .filter(function (d) { return d.isRemoved !== true && !d.id; })\n            .map(function (d) {\n            d.id = _this.helper.generateId();\n            return d;\n        });\n        var changes = [\n            cif.add(ENTITY_COMPANY_EARNING, adds),\n            cif.update(ENTITY_COMPANY_EARNING, updates)\n        ];\n        var changeSet = { changes: changes };\n        return this.saveEntities(changeSet, environment.apiRoot + '/save/companyearning');\n    };\n    CompanyEarningService.ngInjectableDef = i0.defineInjectable({ factory: function CompanyEarningService_Factory() { return new CompanyEarningService(i0.inject(i1.CompanyEntityHelperService)); }, token: CompanyEarningService, providedIn: \"root\" });\n    return CompanyEarningService;\n}(CurrentCompanyEntityCollectionService));\nexport { CompanyEarningService };\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ChangeSet } from 'ngrx-data';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { changeItemFactory as cif } from '@utils';\r\nimport { CompanyEarning, Earning } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\nimport { environment } from '@environment';\r\n\r\nconst ENTITY_COMPANY_EARNING = 'CompanyEarning';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CompanyEarningService extends CurrentCompanyEntityCollectionService<CompanyEarning> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super(ENTITY_COMPANY_EARNING, helper);\r\n  }\r\n  /**\r\n   * Company Earnings\r\n   */\r\n  readonly companyEarnings$ = this.entities$;\r\n\r\n  /**\r\n   * Create a new CompanyEarning from a earning master.\r\n   * The id is empty because will save with upsert.\r\n   */\r\n  createFromEarning(earning: Earning): CompanyEarning {\r\n    if (!earning) {\r\n      throw new Error('earning is null');\r\n    }\r\n    return this.create(new CompanyEarning(earning));\r\n  }\r\n\r\n  /**\r\n   * Multi-entity save of CompanyEarning with adds, updates and deletes\r\n   * @param companyEarning Array of earnings to add, update, or delete.\r\n   * Updates are items with an id, to delete set isRemoved to true\r\n   * Adds are items without an id; will generate that id here.\r\n   * @returns Terminating observable of ChangeSet that emits when server responds\r\n   */\r\n  save(earnings: CompanyEarning[]): Observable<ChangeSet> {\r\n    // Cannot use ChangeSetOp.Upsert because server does not support it.\r\n    // Separate non-deletes into updates (have id) and adds (no id)\r\n    const updates = earnings.filter(d => d.id);\r\n\r\n    // Identity new earnings by missing id and generate their ids before adding\r\n    const adds = earnings\r\n    .filter(d => d.isRemoved !== true && !d.id)\r\n    .map(d => {\r\n      d.id = this.helper.generateId();\r\n      return d;\r\n    });\r\n\r\n    const changes = [\r\n      cif.add(ENTITY_COMPANY_EARNING, adds),\r\n      cif.update(ENTITY_COMPANY_EARNING, updates)\r\n    ];\r\n    const changeSet: ChangeSet<CompanyEarning> = { changes };\r\n\r\n    return this.saveEntities(changeSet, environment.apiRoot + '/save/companyearning');\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { combineLatest, of } from 'rxjs';\nimport { concatMap, first, map } from 'rxjs/operators';\nimport { changeItemFactory as cif } from '@utils';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport { environment } from '@environment';\nimport { EntitySelectors } from '../entity-selectors';\nimport { TaxCollectorService } from '@core/services/tax-services/tax-collector.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../entity-selectors\";\nimport * as i2 from \"./company-entity-helper.service\";\nimport * as i3 from \"../../../core/services/tax-services/tax-collector.service\";\nvar EmployeeService = /** @class */ (function (_super) {\n    __extends(EmployeeService, _super);\n    function EmployeeService(entitySelectors, helper, taxCollectorService) {\n        var _this = _super.call(this, 'Employee', helper) || this;\n        _this.entitySelectors = entitySelectors;\n        _this.helper = helper;\n        _this.taxCollectorService = taxCollectorService;\n        return _this;\n    }\n    EmployeeService.prototype.saveNewEmployee = function (ee, home, epay) {\n        var changes = [\n            cif.add('Address', home),\n            cif.add('Employee', ee),\n            cif.add('EmployeePaymentMethod', epay)\n        ];\n        return this.saveEntities({ changes: changes }, environment.apiRoot + '/save/employee').pipe(map(function (_) { return ee; }));\n    };\n    EmployeeService.prototype.saveEmployeeUpdate = function (ee, home) {\n        var changes = [\n            cif.update('Address', home),\n            cif.update('Employee', ee),\n        ];\n        return this.saveEntities({ changes: changes }, environment.apiRoot + '/save/employee').pipe(map(function (_) { return ee; }));\n    };\n    /**\n     * If Employee.isRemoved flag is changed, toggle and save isRemoved for the entire EE graph.\n     * @param eeId Id of the Employee in question\n     * @param isRemoved the proposed change to the \"soft delete\" flag\n     */\n    EmployeeService.prototype.saveEmployeeIsRemovedById = function (eeId, isRemoved) {\n        var _this = this;\n        return this.entityMap$.pipe(first(), map(function (eeMap) { return eeMap[eeId]; }), concatMap(function (ee) { return _this.saveEmployeeIsRemoved(ee, isRemoved); }));\n    };\n    // TODO: There might be much more work to toggling the isRemoved state.\n    /**\n     * If Employee.isRemoved flag is changed, toggle and save isRemoved for the entire EE graph.\n     * @param ee Employee in question\n     * @param isRemoved the proposed change to the \"soft delete\" flag\n     */\n    EmployeeService.prototype.saveEmployeeIsRemoved = function (ee, isRemoved) {\n        var _this = this;\n        if (ee == null || ee.isRemoved === isRemoved) {\n            return of(null);\n        }\n        ee.isRemoved = isRemoved;\n        var home$ = this.entitySelectors.address.entities$.pipe(map(function (addrs) { return addrs.find(function (a) { return a.id === ee.homeAddressId; }); }));\n        var payment$ = this.entitySelectors.employeePaymentMethod.entities$.pipe(map(function (pms) { return pms.find(function (pm) { return pm.employeeId === ee.id; }); }));\n        // TODO: Always use this multi-entity save\n        var result$ = combineLatest(home$, payment$).pipe(first(), concatMap(function (_a) {\n            var home = _a[0], payment = _a[1];\n            home.isRemoved = ee.isRemoved;\n            var changes = [\n                cif.update('Employee', ee),\n                cif.update('Address', home),\n            ];\n            if (payment) {\n                payment.isRemoved = ee.isRemoved;\n                changes.push(cif.update('EmployeePaymentMethod', payment));\n            }\n            return _this.saveEntities({ changes: changes }, environment.apiRoot + '/save/employee/removed').pipe(concatMap(function () { return _this.taxCollectorService.computeTaxes().pipe(map(function () { return ee; })); }));\n        }));\n        return result$;\n    };\n    EmployeeService.ngInjectableDef = i0.defineInjectable({ factory: function EmployeeService_Factory() { return new EmployeeService(i0.inject(i1.EntitySelectors), i0.inject(i2.CompanyEntityHelperService), i0.inject(i3.TaxCollectorService)); }, token: EmployeeService, providedIn: \"root\" });\n    return EmployeeService;\n}(CurrentCompanyEntityCollectionService));\nexport { EmployeeService };\n","import { Injectable } from '@angular/core';\r\n\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { concatMap, first, map } from 'rxjs/operators';\r\n\r\nimport { Address, Employee, EmployeePaymentMethod } from '@model';\r\nimport { changeItemFactory as cif } from '@utils';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\nimport { environment } from '@environment';\r\nimport { EntitySelectors } from '../entity-selectors';\r\nimport { TaxCollectorService } from '@core/services/tax-services/tax-collector.service';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EmployeeService extends CurrentCompanyEntityCollectionService<Employee> {\r\n  constructor(\r\n    private entitySelectors: EntitySelectors,\r\n    protected helper: CompanyEntityHelperService,\r\n    private taxCollectorService: TaxCollectorService\r\n  ) {\r\n    super('Employee', helper);\r\n  }\r\n\r\n\r\n  saveNewEmployee(ee: Employee, home: Address, epay: EmployeePaymentMethod): Observable<Employee> {\r\n    const changes = [\r\n      cif.add('Address', home),\r\n      cif.add('Employee', ee),\r\n      cif.add('EmployeePaymentMethod', epay)\r\n    ];\r\n    return this.saveEntities({ changes }, environment.apiRoot + '/save/employee').pipe(\r\n      map(_ => ee)\r\n    );\r\n  }\r\n\r\n  saveEmployeeUpdate(ee: Employee, home: Address): Observable<Employee> {\r\n    const changes = [\r\n      cif.update('Address', home),\r\n      cif.update('Employee', ee),\r\n    ];\r\n    return this.saveEntities({ changes }, environment.apiRoot + '/save/employee').pipe(\r\n      map(_ => ee)\r\n    );\r\n  }\r\n  /**\r\n   * If Employee.isRemoved flag is changed, toggle and save isRemoved for the entire EE graph.\r\n   * @param eeId Id of the Employee in question\r\n   * @param isRemoved the proposed change to the \"soft delete\" flag\r\n   */\r\n  saveEmployeeIsRemovedById(eeId: string, isRemoved: boolean ): Observable<Employee> {\r\n    return this.entityMap$.pipe(\r\n      first(),\r\n      map(eeMap => eeMap[eeId]),\r\n      concatMap(ee => this.saveEmployeeIsRemoved(ee, isRemoved))\r\n    );\r\n  }\r\n\r\n  // TODO: There might be much more work to toggling the isRemoved state.\r\n  /**\r\n   * If Employee.isRemoved flag is changed, toggle and save isRemoved for the entire EE graph.\r\n   * @param ee Employee in question\r\n   * @param isRemoved the proposed change to the \"soft delete\" flag\r\n   */\r\n  saveEmployeeIsRemoved(ee: Employee, isRemoved: boolean ): Observable<Employee> {\r\n    if (ee == null || ee.isRemoved === isRemoved) {\r\n      return of(null as Employee);\r\n    }\r\n\r\n    ee.isRemoved = isRemoved;\r\n\r\n    const home$ = this.entitySelectors.address.entities$.pipe(\r\n      map(addrs => addrs.find(a => a.id === ee.homeAddressId))\r\n    );\r\n\r\n    const payment$ = this.entitySelectors.employeePaymentMethod.entities$.pipe(\r\n      map(pms => pms.find(pm => pm.employeeId === ee.id))\r\n    );\r\n\r\n    // TODO: Always use this multi-entity save\r\n    const result$ = combineLatest(home$, payment$).pipe(\r\n      first(),\r\n      concatMap(([home, payment]) => {\r\n        home.isRemoved = ee.isRemoved;\r\n        const changes = [\r\n          cif.update('Employee', ee),\r\n          cif.update('Address', home),\r\n        ];\r\n        if (payment) {\r\n          payment.isRemoved = ee.isRemoved;\r\n          changes.push(cif.update('EmployeePaymentMethod', payment));\r\n        }\r\n        return this.saveEntities({ changes }, environment.apiRoot + '/save/employee/removed').pipe(\r\n          concatMap(() => this.taxCollectorService.computeTaxes().pipe(map(() => ee)))\r\n        );\r\n      }),\r\n    );\r\n    return result$;\r\n  }\r\n}\r\n\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { EntityCollectionServiceBase } from 'ngrx-data';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar CompanyAncillaryService = /** @class */ (function (_super) {\n    __extends(CompanyAncillaryService, _super);\n    function CompanyAncillaryService(helper) {\n        var _this = _super.call(this, 'CompanyAncillary', helper.collectionServiceElementsFactory) || this;\n        _this.helper = helper;\n        return _this;\n    }\n    /**\n     * Dispatch action to save multiple entity changes to remote storage.\n     * @param changes Either the entities to save, as an array of {ChangeSetItem}, or\n     * a ChangeSet that holds such changes.\n     * @param url The server url which receives the save request\n     * @param [options] options such as tag, correlationId, isOptimistic, and mergeStrategy.\n     * These values are defaulted if not supplied.\n     * @returns A terminating Observable<ChangeSet> with data returned from the server\n     * after server reports successful save OR the save error.\n     */\n    CompanyAncillaryService.prototype.saveEntities = function (changes, url, options) {\n        return this.helper.entityCacheDispatcher.saveEntities(changes, url, options);\n    };\n    CompanyAncillaryService.ngInjectableDef = i0.defineInjectable({ factory: function CompanyAncillaryService_Factory() { return new CompanyAncillaryService(i0.inject(i1.CompanyEntityHelperService)); }, token: CompanyAncillaryService, providedIn: \"root\" });\n    return CompanyAncillaryService;\n}(EntityCollectionServiceBase));\nexport { CompanyAncillaryService };\n","import { Injectable } from '@angular/core';\r\nimport { EntityCollectionServiceBase, ChangeSet, EntityActionOptions } from 'ngrx-data';\r\nimport { CompanyAncillary } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CompanyAncillaryService extends EntityCollectionServiceBase<CompanyAncillary> {\r\n  constructor(private helper: CompanyEntityHelperService) {\r\n    super('CompanyAncillary', helper.collectionServiceElementsFactory);\r\n  }\r\n  /**\r\n   * Dispatch action to save multiple entity changes to remote storage.\r\n   * @param changes Either the entities to save, as an array of {ChangeSetItem}, or\r\n   * a ChangeSet that holds such changes.\r\n   * @param url The server url which receives the save request\r\n   * @param [options] options such as tag, correlationId, isOptimistic, and mergeStrategy.\r\n   * These values are defaulted if not supplied.\r\n   * @returns A terminating Observable<ChangeSet> with data returned from the server\r\n   * after server reports successful save OR the save error.\r\n   */\r\n  saveEntities(changes: ChangeSet, url: string, options?: EntityActionOptions) {\r\n    return this.helper.entityCacheDispatcher.saveEntities(changes, url, options);\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar EnvelopeSignerService = /** @class */ (function (_super) {\n    __extends(EnvelopeSignerService, _super);\n    function EnvelopeSignerService(helper) {\n        var _this = _super.call(this, 'EnvelopeSigner', helper) || this;\n        _this.helper = helper;\n        return _this;\n    }\n    EnvelopeSignerService.ngInjectableDef = i0.defineInjectable({ factory: function EnvelopeSignerService_Factory() { return new EnvelopeSignerService(i0.inject(i1.CompanyEntityHelperService)); }, token: EnvelopeSignerService, providedIn: \"root\" });\n    return EnvelopeSignerService;\n}(CurrentCompanyEntityCollectionService));\nexport { EnvelopeSignerService };\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EnvelopeSigner } from '@model';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EnvelopeSignerService extends CurrentCompanyEntityCollectionService<EnvelopeSigner> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super('EnvelopeSigner', helper);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EntityDispatcher } from 'ngrx-data';\n\nimport { of, Observable } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, withLatestFrom } from 'rxjs/operators';\n\nimport { Deduction } from '@model';\nimport { EntityHelperService } from './entity-helper.service';\nimport { environment } from '@environment';\nimport { LoggerService } from '@core';\n\nconst deductionsUrl = environment.apiRoot + '/deductions';\n\n@Injectable({providedIn: 'root'})\nexport class DeductionService {\n\n  /**\n   * Non-terminating observable of ECommerce Deduction master metadata\n   * Return cached deductions if already loaded, else loads from server.\n   * If server load fails, returns previous deductions (if any)\n   * @returns Cold, non-terminating observable of deductions. Must subscribe and unsubscribe.\n   */\n  deductions$: Observable<Deduction[]>;\n\n  private dispatcher: EntityDispatcher<Deduction>;\n\n  /** Non-terminating, boolean observable indicating if Deductions have been loaded successfully */\n  loaded$: Observable<boolean>;\n\n  constructor(\n    entityHelper: EntityHelperService,\n    private http: HttpClient,\n    private logger: LoggerService\n  ) {\n    const elements = entityHelper.collectionServiceElementsFactory.create<Deduction>('Deduction');\n    this.dispatcher = elements.dispatcher;\n    this.loaded$ = elements.selectors$.loaded$;\n\n    this.deductions$ = elements.selectors$.entities$.pipe(\n      withLatestFrom(this.loaded$),\n      switchMap(([deductions, loaded]) => {\n        return loaded\n          ? of(deductions)\n          : this.http.get<Deduction[]>(deductionsUrl).pipe(\n            map(newDeductions => {\n              this.dispatcher.addAllToCache(newDeductions);\n              return newDeductions;\n            }),\n            catchError(error => {\n               // Swallow error and return previous deductions (if any)\n               this.logger.error('Deductions service failed to return deductions', error);\n               this.dispatcher.setLoaded(true); // pretend it loaded successfully\n               return of(deductions);\n            })\n          );\n      }),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * Clear the Deductions master metadata in cache. Next `getDeductions()` will refresh it.\n   */\n  clearCache() {\n    this.dispatcher.clearCache(); // also clears loaded$ flag\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { EntityHelperService } from './entity-helper.service';\nimport { environment } from '@environment';\nimport { LoggerService } from '@core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./entity-helper.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../../core/services/logger.service\";\nvar deductionsUrl = environment.apiRoot + '/deductions';\nvar DeductionService = /** @class */ (function () {\n    function DeductionService(entityHelper, http, logger) {\n        var _this = this;\n        this.http = http;\n        this.logger = logger;\n        var elements = entityHelper.collectionServiceElementsFactory.create('Deduction');\n        this.dispatcher = elements.dispatcher;\n        this.loaded$ = elements.selectors$.loaded$;\n        this.deductions$ = elements.selectors$.entities$.pipe(withLatestFrom(this.loaded$), switchMap(function (_a) {\n            var deductions = _a[0], loaded = _a[1];\n            return loaded\n                ? of(deductions)\n                : _this.http.get(deductionsUrl).pipe(map(function (newDeductions) {\n                    _this.dispatcher.addAllToCache(newDeductions);\n                    return newDeductions;\n                }), catchError(function (error) {\n                    // Swallow error and return previous deductions (if any)\n                    _this.logger.error('Deductions service failed to return deductions', error);\n                    _this.dispatcher.setLoaded(true); // pretend it loaded successfully\n                    return of(deductions);\n                }));\n        }), shareReplay(1));\n    }\n    /**\n     * Clear the Deductions master metadata in cache. Next `getDeductions()` will refresh it.\n     */\n    DeductionService.prototype.clearCache = function () {\n        this.dispatcher.clearCache(); // also clears loaded$ flag\n    };\n    DeductionService.ngInjectableDef = i0.defineInjectable({ factory: function DeductionService_Factory() { return new DeductionService(i0.inject(i1.EntityHelperService), i0.inject(i2.HttpClient), i0.inject(i3.LoggerService)); }, token: DeductionService, providedIn: \"root\" });\n    return DeductionService;\n}());\nexport { DeductionService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { map } from 'rxjs/operators';\nimport { changeItemFactory as cif } from '@utils';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nvar ENTITY_EMPLOYEE_DEDUCTION = 'EmployeeDeduction';\nvar EmployeeDeductionService = /** @class */ (function (_super) {\n    __extends(EmployeeDeductionService, _super);\n    function EmployeeDeductionService(helper) {\n        var _this = _super.call(this, 'EmployeeDeduction', helper) || this;\n        _this.helper = helper;\n        /**\n         * Employee Deductions\n         */\n        _this.employeeDeductions$ = _this.entities$;\n        return _this;\n    }\n    EmployeeDeductionService.prototype.getEmployeeDeductions = function (empId) {\n        return this.employeeDeductions$.pipe(map(function (ds) {\n            return ds.filter(function (d) { return d.employeeId === empId; });\n        }));\n    };\n    EmployeeDeductionService.prototype.getDeductionsLinkedTo = function (companyDeductionId) {\n        return this.employeeDeductions$.pipe(map(function (ds) {\n            return ds.filter(function (d) { return d.companyDeductionId === companyDeductionId; });\n        }));\n    };\n    // TODO: Test with real services\n    /**\n     * Multi-entity save of EmployeeDeduction with adds, updates and deletes\n     * @param deductions Array of deductions to add, update, or delete.\n     * Deletes have isRemoved: true\n     * Updates are non-deletes with an id\n     * Adds are non-deletes without an id; will generate that id here.\n     * @returns Terminating observable of ChangeSet that emits when server responds\n     */\n    EmployeeDeductionService.prototype.save = function (deductions) {\n        var _this = this;\n        var deletes = (deductions || []).filter(function (d) { return d.isRemoved === true && d.id; });\n        // Ignore deductions with isRemoved:true but no id because they don't exist on the server\n        // Cannot use ChangeSetOp.Upsert because server does not support it.\n        // Separate non-deletes into updates (have id) and adds (no id)\n        var updates = (deductions || []).filter(function (d) { return d.isRemoved !== true && d.id; });\n        // Identity new deductions by missing id and generate their ids before adding\n        var adds = (deductions || [])\n            .filter(function (d) { return d.isRemoved !== true && !d.id; })\n            .map(function (d) {\n            d.id = _this.helper.generateId();\n            return d;\n        });\n        var changes = [\n            cif.add(ENTITY_EMPLOYEE_DEDUCTION, adds),\n            cif.update(ENTITY_EMPLOYEE_DEDUCTION, updates),\n            cif.delete(ENTITY_EMPLOYEE_DEDUCTION, deletes)\n        ];\n        var changeSet = { changes: changes };\n        return this.saveEntities(changeSet, '/save/employee-deduction');\n    };\n    EmployeeDeductionService.ngInjectableDef = i0.defineInjectable({ factory: function EmployeeDeductionService_Factory() { return new EmployeeDeductionService(i0.inject(i1.CompanyEntityHelperService)); }, token: EmployeeDeductionService, providedIn: \"root\" });\n    return EmployeeDeductionService;\n}(CurrentCompanyEntityCollectionService));\nexport { EmployeeDeductionService };\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { changeItemFactory as cif } from '@utils';\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\nimport { EmployeeDeduction } from '@app/model';\r\nimport { ChangeSet } from 'ngrx-data';\r\n\r\n\r\nconst ENTITY_EMPLOYEE_DEDUCTION = 'EmployeeDeduction';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class EmployeeDeductionService extends CurrentCompanyEntityCollectionService<EmployeeDeduction> {\r\n  constructor(protected helper: CompanyEntityHelperService) {\r\n    super('EmployeeDeduction', helper);\r\n  }\r\n  /**\r\n   * Employee Deductions\r\n   */\r\n  readonly employeeDeductions$ = this.entities$;\r\n\r\n  getEmployeeDeductions(empId: string): Observable<EmployeeDeduction[]> {\r\n    return this.employeeDeductions$.pipe(\r\n      map(ds =>\r\n        ds.filter(d => d.employeeId === empId)\r\n      )\r\n    );\r\n  }\r\n\r\n  getDeductionsLinkedTo(companyDeductionId: string): Observable<EmployeeDeduction[]> {\r\n    return this.employeeDeductions$.pipe(\r\n      map(ds =>\r\n        ds.filter(d => d.companyDeductionId === companyDeductionId)\r\n      )\r\n    );\r\n  }\r\n\r\n   // TODO: Test with real services\r\n  /**\r\n   * Multi-entity save of EmployeeDeduction with adds, updates and deletes\r\n   * @param deductions Array of deductions to add, update, or delete.\r\n   * Deletes have isRemoved: true\r\n   * Updates are non-deletes with an id\r\n   * Adds are non-deletes without an id; will generate that id here.\r\n   * @returns Terminating observable of ChangeSet that emits when server responds\r\n   */\r\n  save(deductions: EmployeeDeduction[]): Observable<ChangeSet> {\r\n    const deletes = (deductions || []).filter(d => d.isRemoved === true && d.id);\r\n    // Ignore deductions with isRemoved:true but no id because they don't exist on the server\r\n\r\n    // Cannot use ChangeSetOp.Upsert because server does not support it.\r\n    // Separate non-deletes into updates (have id) and adds (no id)\r\n    const updates = (deductions || []).filter(d => d.isRemoved !== true && d.id);\r\n\r\n    // Identity new deductions by missing id and generate their ids before adding\r\n    const adds = (deductions || [])\r\n    .filter(d => d.isRemoved !== true && !d.id)\r\n    .map(d => {\r\n      d.id = this.helper.generateId();\r\n      return d;\r\n    });\r\n\r\n    const changes = [\r\n      cif.add(ENTITY_EMPLOYEE_DEDUCTION, adds),\r\n      cif.update(ENTITY_EMPLOYEE_DEDUCTION, updates),\r\n      cif.delete(ENTITY_EMPLOYEE_DEDUCTION, deletes)\r\n    ];\r\n    const changeSet: ChangeSet<EmployeeDeduction> = { changes };\r\n\r\n    return this.saveEntities(changeSet, '/save/employee-deduction');\r\n  }\r\n}\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { HttpClient } from '@angular/common/http';\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\nimport { environment } from '@environment';\nimport { BusyService } from '@app/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./company-entity-helper.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../../core/services/busy.service\";\nvar DocumentService = /** @class */ (function (_super) {\n    __extends(DocumentService, _super);\n    function DocumentService(helper, http, busyService) {\n        var _this = _super.call(this, 'Document', helper) || this;\n        _this.helper = helper;\n        _this.http = http;\n        _this.busyService = busyService;\n        return _this;\n    }\n    /**\n     * Get the PDF for a signable document by its id.\n     * @param docId Id of the PDF to download\n     * @returns The PDF as a Blob\n     */\n    DocumentService.prototype.getDocPdf = function (docId) {\n        // Use HttpClient to download (vs just a link) because requires Bearer token\n        var url = environment.apiRoot + (\"/document/download/\" + docId);\n        return this.busyService.busy$('Building Document ...', this.http.get(url, { responseType: 'blob' }));\n    };\n    DocumentService.ngInjectableDef = i0.defineInjectable({ factory: function DocumentService_Factory() { return new DocumentService(i0.inject(i1.CompanyEntityHelperService), i0.inject(i2.HttpClient), i0.inject(i3.BusyService)); }, token: DocumentService, providedIn: \"root\" });\n    return DocumentService;\n}(CurrentCompanyEntityCollectionService));\nexport { DocumentService };\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { CompanyEntityHelperService } from './company-entity-helper.service';\r\nimport { CurrentCompanyEntityCollectionService } from './current-company-entity-collection-service';\r\nimport { Document } from '@model';\r\nimport { environment } from '@environment';\r\nimport { BusyService } from '@app/core';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DocumentService extends CurrentCompanyEntityCollectionService<Document> {\r\n  constructor(\r\n    protected helper: CompanyEntityHelperService,\r\n    private http: HttpClient,\r\n    private busyService: BusyService\r\n  ) {\r\n    super('Document', helper);\r\n  }\r\n\r\n  /**\r\n   * Get the PDF for a signable document by its id.\r\n   * @param docId Id of the PDF to download\r\n   * @returns The PDF as a Blob\r\n   */\r\n  getDocPdf(docId: string): Observable<Blob> {\r\n    // Use HttpClient to download (vs just a link) because requires Bearer token\r\n    const url = environment.apiRoot + `/document/download/${docId}`;\r\n    return this.busyService.busy$('Building Document ...',\r\n      this.http.get<Blob>(url, { responseType: 'blob' as 'json' })\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}