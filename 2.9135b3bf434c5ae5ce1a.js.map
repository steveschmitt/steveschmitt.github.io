{"version":3,"sources":["webpack:///./src/app/account-details/account-details-address.component.html","webpack:///./src/app/account-details/account-details-address.component.ts","webpack:///./src/app/account-details/account-details-company.component.html","webpack:///./src/app/account-details/account-details-company.component.ts","webpack:///./src/app/account-details/account-details-companyStateTax.component.html","webpack:///./src/app/account-details/account-details-companyStateTax.component.ts","webpack:///./src/app/account-details/account-details-container.component.html","webpack:///./src/app/account-details/account-details-container.component.ts","webpack:///./src/app/account-details/account-details-earnings-list.component.html","webpack:///./src/app/account-details/account-details-earnings-list.component.ts","webpack:///./src/app/account-details/account-details-employee-setup.component.html","webpack:///./src/app/account-details/account-details-employee-setup.component.ts","webpack:///./src/app/account-details/account-details-employee.component.html","webpack:///./src/app/account-details/account-details-employee.component.ts","webpack:///./src/app/account-details/account-details-fed-tax.component.html","webpack:///./src/app/account-details/account-details-fed-tax.component.ts","webpack:///./src/app/account-details/account-details-user.component.html","webpack:///./src/app/account-details/account-details-user.component.ts"],"names":[],"mappings":"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","file":"2.9135b3bf434c5ae5ce1a.js","sourcesContent":["<tr>\r\n    <th>{{qualifier()}}</th>\r\n    <td>{{ formatted() }}</td>\r\n</tr>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Address } from '@model';\r\nimport { addressToString } from '@core/utils';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-address',\r\n  templateUrl: './account-details-address.component.html'\r\n})\r\nexport class AccountDetailsAddressComponent implements OnInit {\r\n  @Input()\r\n  address: Address;\r\n  @Input()\r\n  type: string;\r\n  @Input()\r\n  isEmployee = true;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  formatted() {\r\n    return this.address ? addressToString(this.address) : 'missing';\r\n  }\r\n\r\n  qualifier() {\r\n    if (this.type) {\r\n      return this.type;\r\n    } else if (!this.address) {\r\n      return 'Address';\r\n    } else if (this.isEmployee) {\r\n      return this.address.isHome ? 'Home' : 'Work';\r\n    } else {\r\n      return this.address.isMain ? 'Main' : 'Other';\r\n    }\r\n  }\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-body\" *ngIf=\"company; else NoData\">\r\n\r\n    <!-- General Company Info-->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">General</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Legal Name</th>\r\n          <td>{{ company.legalName }}</td>\r\n        </tr>\r\n        <tr *ngIf=\"!company.isHousehold\">\r\n          <th>Doing Business As (DBA)</th>\r\n          <td>{{ company.name }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Is Household</th>\r\n          <td class=\"text-capitalize\">{{ company.isHousehold | yesno }}</td>\r\n        </tr>\r\n        <tr *ngIf=\"!company.isHousehold\">\r\n          <th>Company Type</th>\r\n          <td class=\"text-capitalize\">{{ company.companyType || 'missing' }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Addresses -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">Locations</th>\r\n        </tr>\r\n        <tr>\r\n          <sp-account-details-address *ngFor=\"let address of addresses | async\" [address]=\"address\" [isEmployee]=\"false\"></sp-account-details-address>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Bank Account -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">Bank Account</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Bank Name</th>\r\n          <td class=\"text-capitalize\">{{ company.bankName || 'missing or invalid' }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Bank Routing Number</th>\r\n          <td>{{ company.bankAccountRn }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Bank Account Number</th>\r\n          <td>{{ company.bankAccountNumber }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Bank Account Type</th>\r\n          <td class=\"text-capitalize\">{{ company.bankAccountType }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Payroll  -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">Payroll</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Payroll Frequency</th>\r\n          <td class=\"text-capitalize\">{{ company.payrollFrequency || 'Not Provided' }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Period Start Date</th>\r\n          <td>{{ company.periodStartDate | date:\"MM/dd/yyyy\" }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Period End Date</th>\r\n          <td>{{ company.periodEndDate | date:\"MM/dd/yyyy\" }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>First Check Date</th>\r\n          <td>{{ company.firstCheckDate | date:\"MM/dd/yyyy\" }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Enrollment Stats -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">Enrollment Details</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Enrollment Start Date</th>\r\n          <td>{{ company.enrollmentStartDate | date:\"MM/dd/yyyy\" }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Enrollment Close Date</th>\r\n          <td>{{ company.enrollmentCloseDate | date:'full' }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n  </div>\r\n  <ng-template #NoData>\r\n    <div div class=\"card-body\">\r\n      No Company Data Provided\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { Company, Address } from '@model';\r\nimport { EntitySelectors } from '@entity';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-company',\r\n  templateUrl: './account-details-company.component.html'\r\n})\r\nexport class AccountDetailsCompanyComponent implements OnInit {\r\n  @Input() company: Company;\r\n  addresses: Observable<Address[]>;\r\n\r\n  constructor(private entitySelectors: EntitySelectors) {}\r\n\r\n  ngOnInit(): void {\r\n    this.addresses = this.entitySelectors.address.entities$.pipe(\r\n      map(ao =>\r\n        ao\r\n          .filter(a => a.companyId === this.company.id && !a.isHome)\r\n          .sort((a1, a2) => (a1.isMain === a2.isMain ? 0 : a1.isMain ? -1 : 1))\r\n      )\r\n    );\r\n  }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <table class=\"table table-sm\" *ngIf=\"stateTaxes.length > 0; else NoData\">\r\n            <tbody>\r\n                <tr class=\"table-subheader\">\r\n                    <th colspan=\"2\" class=\"text-capitalize\">{{ state | stateName }} State & Local Taxes</th>\r\n                </tr>\r\n                <ng-template ngFor let-tax [ngForOf]=\"stateTaxes\">\r\n                    <tr>\r\n                        <td class=\"multi-row\" colspan=\"2\">\r\n                            <span class=\"font-weight-bold mt-1\">{{ tax.name }} Tax</span>\r\n                            <ul>\r\n                                <li>\r\n                                    <span class=\"col1\">Filing Status:</span>\r\n                                    <span class=\"col2 text-capitalize\">{{ tax.isExempt | subjectexempt }}</span>\r\n                                </li>\r\n                                <li *ngIf=\"(tax.ein && tax.ein !== '') || tax.appliedForEin\">\r\n                                    <span class=\"col1\">EIN:</span>\r\n                                    <span class=\"col2\" *ngIf=\"!tax.appliedForEin\">{{ tax.ein }}</span>\r\n                                    <span class=\"col2\" *ngIf=\"tax.appliedForEin\">Applied For</span>\r\n                                </li>\r\n                                <li *ngIf=\"tax.rateType === 'Variable'\">\r\n                                        <span class=\"col1\">Rate:</span>\r\n                                        <span class=\"col2\">{{ tax.rate }}</span>\r\n                                </li>\r\n                            </ul>\r\n                        </td>\r\n                    </tr>\r\n                </ng-template>\r\n            </tbody>\r\n        </table>\r\n        <ng-template #NoData>\r\n            <span class=\"font-weight-bold\">{{ state | stateName }}</span> contains no taxes data\r\n        </ng-template>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { CompanyTax } from '@app/model/entities';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-companystatetax',\r\n  templateUrl: './account-details-companyStateTax.component.html'\r\n})\r\nexport class AccountDetailsCompanyStateTaxComponent implements OnInit {\r\n  @Input() state: string;\r\n  @Input() stateTaxes: CompanyTax[];\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n}\r\n","<div *ngIf=\"company$ | async as company; else noCompany\" class=\"standard static-nav d-flex flex-column\">\r\n  <h3 class=\"mt-3 mb-3 text-center\">Your User Information</h3>\r\n  <sp-account-details-user [user]=\"user$ | async\"></sp-account-details-user>\r\n\r\n  <h3 class=\"mt-3 mb-3 text-center\">{{ company | companyKind }} Overview</h3>\r\n  <sp-account-details-company [company]=\"company\"></sp-account-details-company>\r\n\r\n  <h3 class=\"mt-3 mb-3 text-center\">{{ company | companyKind }} Employer Taxes</h3>\r\n  <sp-account-details-fed-tax [company]=\"company\"\r\n                              [householdFilers]=\"householdFilers$ | async\"\r\n                              [companyFedTaxes]=\"companyFedTaxes$ | async\">\r\n  </sp-account-details-fed-tax>\r\n\r\n  <sp-account-details-companystatetax *ngFor='let companyStateTax of companyStateTaxes$ | async' [state]=\"companyStateTax.state\" [stateTaxes]=\"companyStateTax.taxes\"></sp-account-details-companystatetax>\r\n\r\n  <h3 *ngIf=\"hasAdditionalEarning$ | async\" class=\"mt-3 mb-3 text-center\">Additional Earnings</h3>\r\n  <sp-account-details-earnings-list></sp-account-details-earnings-list>\r\n\r\n  <h3 class=\"mt-3 mb-3 text-center\">Employees </h3>\r\n  <sp-account-details-employee-setup [company]=\"company\"></sp-account-details-employee-setup>\r\n  <sp-account-details-employee *ngFor='let employee of employees$ | async' [employee]=\"employee\"></sp-account-details-employee>\r\n</div>\r\n<ng-template #noCompany>\r\n  No company loaded\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { EntitySelectors, TaxLocationService } from '@entity';\r\nimport * as Model from '@model';\r\nimport { TaxTypeCode } from '@model';\r\nimport { SessionService } from '@session';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-container',\r\n  templateUrl: './account-details-container.component.html'\r\n})\r\nexport class AccountDetailsContainerComponent implements OnInit {\r\n  company$: Observable<Model.Company>;\r\n  companyFedTaxes$: Observable<Model.CompanyTax[]>;\r\n  companyStateTaxes$: Observable<{ state: string, taxes: Model.CompanyTax[] }[]>;\r\n  documents$: Observable<Model.Document[]>;\r\n  employees$: Observable<Model.Employee[]>;\r\n  employeePaymentMethods$: Observable<Model.EmployeePaymentMethod[]>;\r\n  envelopes$: Observable<Model.Envelope[]>;\r\n  envelopesSigners$: Observable<Model.EnvelopeSigner[]>;\r\n  hasAdditionalEarning$: Observable<boolean>;\r\n  householdFilers$: Observable<Model.HouseholdFilers>;\r\n  user$: Observable<Model.User>;\r\n  userFullName$: Observable<string>;\r\n\r\n  constructor(\r\n    private entitySelectors: EntitySelectors,\r\n    private sessionService: SessionService,\r\n    private taxLocationService: TaxLocationService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    window.scrollTo(0, 0);\r\n\r\n    this.company$ = this.sessionService.currentCompany$;\r\n    this.user$ = this.sessionService.currentUser$;\r\n\r\n    this.companyFedTaxes$ = this.entitySelectors.companyTax.entities$.pipe(\r\n      liveOnly,\r\n      map(cTax => cTax.filter(t => t.taxTypeCode === TaxTypeCode.Federal))\r\n    );\r\n\r\n    this.companyStateTaxes$ = combineLatest(\r\n      this.entitySelectors.companyTax.entities$.pipe(liveOnly),\r\n      this.taxLocationService.companyTaxStates$,\r\n    ).pipe(\r\n      map(([cTaxes, companyStates]) => {\r\n        const taxesByState = companyStates.map(s =>\r\n          ({\r\n            state: s,\r\n            taxes: cTaxes.filter(t => t.stateCode === s)\r\n          }));\r\n\r\n        return taxesByState;\r\n      }));\r\n    this.documents$ = this.entitySelectors.document.entities$.pipe(liveOnly);\r\n    this.employees$ = this.entitySelectors.employee.entities$.pipe(liveOnly);\r\n    this.employeePaymentMethods$ = this.entitySelectors.employeePaymentMethod.entities$.pipe(liveOnly);\r\n    this.envelopes$ = this.entitySelectors.envelope.entities$.pipe(liveOnly);\r\n    this.envelopesSigners$ = this.entitySelectors.envelopeSigner.entities$.pipe(liveOnly);\r\n\r\n    this.householdFilers$ =\r\n      combineLatest(\r\n        this.sessionService.currentCompanyId$,\r\n        this.entitySelectors.householdFilers.entities$\r\n      ).pipe(\r\n        // Just the one record belonging to the current company (there should only be one anyway)\r\n        map(([companyId, filersCollection]) =>\r\n          filersCollection.find(f => f.companyId === companyId))\r\n      );\r\n\r\n    this.hasAdditionalEarning$ = this.entitySelectors.companyEarning.entities$.pipe(\r\n      liveOnly,\r\n      map(e => e.length > 0)\r\n    );\r\n  }\r\n}\r\n\r\n/** Keep just the first available, \"live\" records (those which do not have isRemoved:true) */\r\nfunction liveOnly<T extends { isRemoved: boolean }>(source: Observable<T[]>): Observable<T[]> {\r\n  return source.pipe(map(entities => entities.filter(e => e.isRemoved !== true)));\r\n}\r\n","<ng-container *ngIf=\"vm$ | async as vm\">\r\n  <div class=\"card\" *ngIf=\"vm.length > 0\">\r\n    <div class=\"card-body\">\r\n      <table class=\"table table-m\">\r\n        <tr class=\"table-subheader\">\r\n          <th>Earning Type</th>\r\n          <th>Name</th>\r\n          <th>Abbreviation</th>\r\n        </tr>\r\n        <tr *ngFor=\"let earning of vm\">\r\n          <td>{{earning.earningTypeName}} {{earning.earningTaxType}}</td>\r\n          <td>{{earning.description}}</td>\r\n          <td>{{earning.name}}</td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport { map, first } from 'rxjs/operators';\r\n\r\nimport { Earning } from '@app/model';\r\nimport { EarningService, CompanyEarningService } from '@app/store/entity';\r\n\r\ninterface EarningsListModel {\r\n  code: string;\r\n  name: string;\r\n  description: string;\r\n  earningTypeName: string;\r\n  earningTaxType: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'sp-account-details-earnings-list',\r\n  templateUrl: './account-details-earnings-list.component.html'\r\n})\r\nexport class AccountDetailsEarningsListComponent implements OnInit {\r\n  vm$: Observable<EarningsListModel[]>;\r\n\r\n  constructor(\r\n    private earningService: EarningService,\r\n    private companyEarningsService: CompanyEarningService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.vm$ = combineLatest(\r\n      this.earningService.earnings$,\r\n      this.companyEarningsService.companyEarnings$\r\n    ).pipe(\r\n      first(),\r\n      map(([earnings, companyEarnings]) => {\r\n        return companyEarnings\r\n          .filter(ce => !ce.isRemoved)\r\n          .map(ce => {\r\n            const ern = earnings.find(e => e.code === ce.earningCode) || {} as Earning;\r\n            let taxType = ern.earningTaxType || '';\r\n            taxType = taxType.toLowerCase().trim() === 'none' ? '' : '(' + ern.earningTaxType + ')';\r\n            return {\r\n              code: ce.earningCode,\r\n              name: ce.name,\r\n              description: ce.description,\r\n              earningTypeName: ern.earningTypeName || '',\r\n              earningTaxType: taxType\r\n            };\r\n          })\r\n          .sort(this.sortEarnings);\r\n      })\r\n    );\r\n  }\r\n\r\n  private sortEarnings(a: EarningsListModel, b: EarningsListModel): number {\r\n    const typeRes = a.earningTypeName.toLowerCase().localeCompare(b.earningTypeName.toLowerCase());\r\n    const nameRes = a.name.toLowerCase().localeCompare(b.name.toLowerCase());\r\n    const desRes = a.description.toLowerCase().localeCompare(b.description.toLowerCase());\r\n\r\n    return typeRes === 0 ? (desRes === 0 ? nameRes : desRes) : typeRes;\r\n  }\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader text-center\">\r\n          <th colspan=\"2\">Employee Setup</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Has Prior Payroll</th>\r\n          <td class=\"text-capitalize\">{{ company.hasPriorPayroll | yesno }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Need Deductions Setup</th>\r\n          <td class=\"text-capitalize\">{{ company.needDeductionSetup | yesno }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Company } from '@model';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-employee-setup',\r\n  templateUrl: './account-details-employee-setup.component.html'\r\n})\r\nexport class AccountDetailsEmployeeSetupComponent {\r\n  @Input() company: Company;\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-body\" *ngIf=\"employee; else NoData\">\r\n\r\n    <!-- Employee Personal Table -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader text-center\">\r\n          <th colspan=\"2\" class=\"pb-3\">Employee - {{getFullName(employee)}}</th>\r\n        </tr>\r\n        <tr>\r\n          <th>First Name</th>\r\n          <td>{{ employee.firstName }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Last Name</th>\r\n          <td>{{ employee.lastName }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Employee Account Set Up</th>\r\n          <td class=\"text-capitalize\">{{ employee.canContact | yesno }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Email</th>\r\n          <td>{{ employee.email }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Phone</th>\r\n          <td>{{ employee.phone | phone }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Status</th>\r\n          <td class=\"text-capitalize\">{{ getHireStatus() }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Hire Date</th>\r\n          <td>{{ employee.hireDate | date:\"MM/dd/yyyy\" }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Birth Date</th>\r\n          <td>{{ employee.birthDate | date:\"MM/dd/yyyy\" }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Sex</th>\r\n          <td class=\"text-capitalize\">{{ employee.sex }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Employee Address Table -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">{{ employee.firstName }}'s Addresses</th>\r\n        </tr>\r\n\r\n        <tr *ngIf=\"addresses$ | async as addrs\">\r\n          <sp-account-details-address [address]=\"addrs.workAddress\" [type]=\"Work\"></sp-account-details-address>\r\n          <sp-account-details-address [address]=\"addrs.homeAddress\" [type]=\"Home\"></sp-account-details-address>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Employee Payment Table -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">{{ employee.firstName }}'s Payment Details</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Employee Type</th>\r\n          <td class=\"text-capitalize\">{{ employee.employeeType }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Pay Type</th>\r\n          <td class=\"text-capitalize\">{{ employee.payType }}</td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>Pay Rate</th>\r\n          <td>{{ employee.payRate | currency }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Overtime Rate</th>\r\n          <td>{{ employee.overtimeRate }}</td>\r\n        </tr>\r\n        <tr>\r\n          <th>Pay Frequency</th>\r\n          <td class=\"text-capitalize\">{{ employee.payFrequency }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Employee Payment Account Table -->\r\n    <div *ngIf=\"paymentMethod$ | async as pm; else noPaymentAccount\">\r\n      <table class=\"table table-sm\">\r\n        <tbody>\r\n          <tr class=\"table-subheader\">\r\n            <th colspan=\"2\">{{ employee.firstName }}'s Payment Accounts</th>\r\n          </tr>\r\n\r\n          <tr *ngIf=\"pm.split1IsActive\">\r\n            <td class=\"multi-row\" colspan=\"2\">\r\n              <span class=\"font-weight-bold\">1st Account</span>\r\n              <ul>\r\n                  <li>\r\n                    <span class=\"col1\">Account Type:</span>\r\n                    <span class=\"col2 text-capitalize\">{{pm.split1AccountType}}</span>\r\n                  </li>\r\n                  <li>\r\n                    <span class=\"col1\">Split:</span>\r\n                    <span class=\"col2\">{{ getSplitAmount(pm, pm.split1Value) }}</span>\r\n                  </li>\r\n                  <ng-template [ngIf]=\"pm.split1AccountType !== PrintedCheck\">\r\n                    <li>\r\n                      <span class=\"col1\">Bank Name:</span>\r\n                      <span class=\"col2\">{{pm.split1AccountBankName || 'missing or invalid'}}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Routing Number:</span>\r\n                      <span class=\"col2\">{{pm.split1AccountRn}}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Account Number:</span>\r\n                      <span class=\"col2\">{{pm.split1AccountNumber}}</span>\r\n                    </li>\r\n                </ng-template>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr *ngIf=\"pm.split2IsActive\">\r\n            <td class=\"multi-row\" colspan=\"2\">\r\n              <span class=\"font-weight-bold\">2nd Account</span>\r\n              <ul>\r\n                  <li>\r\n                    <span class=\"col1\">Account Type:</span>\r\n                    <span class=\"col2 text-capitalize\">{{pm.split2AccountType}}</span>\r\n                  </li>\r\n                  <li>\r\n                    <span class=\"col1\">Split:</span>\r\n                    <span class=\"col2\">{{ getSplitAmount(pm, pm.split2Value) }}</span>\r\n                  </li>\r\n                  <ng-template [ngIf]=\"pm.split2AccountType !== PrintedCheck\">\r\n                    <li>\r\n                      <span class=\"col1\">Bank Name:</span>\r\n                      <span class=\"col2\">{{pm.split2AccountBankName || 'missing or invalid'}}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Routing Number:</span>\r\n                      <span class=\"col2\">{{pm.split2AccountRn}}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Account Number:</span>\r\n                      <span class=\"col2\">{{pm.split2AccountNumber}}</span>\r\n                    </li>\r\n                </ng-template>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n\r\n          <tr>\r\n            <td class=\"multi-row\" colspan=\"2\">\r\n              <span *ngIf=\"pm.split1IsActive || pm.split2IsActive\" class=\"font-weight-bold\">Balance</span>\r\n              <ul>\r\n                  <li>\r\n                    <span class=\"col1\">Account Type:</span>\r\n                    <span class=\"col2 text-capitalize\">{{pm.defaultAccountType}}</span>\r\n                  </li>\r\n                  <ng-template [ngIf]=\"pm.defaultAccountType !== PrintedCheck\">\r\n                    <li>\r\n                      <span class=\"col1\">Bank Name:</span>\r\n                      <span class=\"col2\">{{pm.defaultAccountBankName || 'missing or invalid'}}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Routing Number:</span>\r\n                      <span class=\"col2\">{{pm.defaultAccountRn}}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Account Number:</span>\r\n                      <span class=\"col2\">{{pm.defaultAccountNumber}}</span>\r\n                    </li>\r\n                </ng-template>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <ng-template #noPaymentAccount>\r\n      <table class=\"table table-sm\">\r\n        <tbody>\r\n          <tr class=\"table-subheader\">\r\n            <th>{{ employee.firstName }}'s Payment Accounts</th>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <span *ngIf=\"employee.isTerminated; else missingPaymentAccount\">\r\n                No payment accounts because {{ employee.firstName }} is terminated.\r\n              </span>\r\n              <ng-template #missingPaymentAccount>\r\n                Payment account(s) missing\r\n              </ng-template>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </ng-template>\r\n\r\n    <!-- Employee Tax Table -->\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\">{{ employee.firstName }}'s Taxes</th>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th>SSN</th>\r\n          <td>{{ employee.ssn | ssn}}</td>\r\n        </tr>\r\n\r\n        <ng-container *ngFor=\"let tax of taxes$ | async\">\r\n          <tr>\r\n            <td class=\"multi-row\" colspan=\"2\">\r\n              <span class=\"font-weight-bold\">{{ tax.name }} Tax</span>\r\n              <ul>\r\n                <li>\r\n                    <span class=\"col1\">Tax Status:</span>\r\n                    <span class=\"col2 text-capitalize\">{{ tax.isExempt | subjectexempt }}</span>\r\n                  </li>\r\n                  <li *ngIf=\"tax.isExempt && tax.exemptReasonCode != null && tax.exemptReasonCode !== ''\">Exempt reason:\r\n                    <strong>{{getExemptReason(tax.exemptReasonCode) }}</strong>\r\n                  </li>\r\n                  <li *ngIf=\"tax.filingStatus && tax.filingStatus !== ''\">\r\n                    <span class=\"col1\">Filing Status:</span>\r\n                    <span class=\"col2\">{{getFilingStatus(tax.filingStatus) }}</span>\r\n                  </li>\r\n                  <ng-container *ngIf=\"tax.withholdingAllowance\">\r\n                    <li>\r\n                      <span class=\"col1\">Allowances:</span>\r\n                      <span class=\"col2\">{{tax.withholdingAllowance }}</span>\r\n                    </li>\r\n                    <li>\r\n                      <span class=\"col1\">Extra Withholding:</span>\r\n                      <span class=\"col2\">{{tax.extraWithholding}}</span>\r\n                    </li>\r\n                </ng-container>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n        </ng-container>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <ng-template #NoData>\r\n    <div class=\"card-body\">\r\n      No Employee Data Provided\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport {\r\n  Address, Employee, EmployeePaymentMethod, EmployeeTax,\r\n  PaymentAccountType, PaymentStrategy, TaxExemptionReasonsCodes\r\n} from '@model';\r\nimport { EntitySelectors } from '@entity';\r\nimport { getFullName } from '@core';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-employee',\r\n  templateUrl: './account-details-employee.component.html'\r\n})\r\nexport class AccountDetailsEmployeeComponent implements OnInit {\r\n  @Input() employee: Employee;\r\n\r\n  addresses$: Observable<{\r\n    homeAddress: Address,\r\n    workAddress: Address\r\n  }>;\r\n\r\n  paymentMethod$: Observable<EmployeePaymentMethod>;\r\n  taxes$: Observable<EmployeeTax[]>;\r\n\r\n  PrintedCheck = PaymentAccountType.PrintedCheck;\r\n\r\n  constructor(private entitySelectors: EntitySelectors) { }\r\n\r\n  ngOnInit(): void {\r\n    const eid = this.employee.id;\r\n\r\n    this.addresses$ = this.entitySelectors.address.entities$.pipe(\r\n      map(ar => ({\r\n        // find first home and work address (should be only) that matches this EE\r\n        homeAddress: ar.find(a => a.id === this.employee.homeAddressId),\r\n        workAddress: ar.find(a => a.id === this.employee.workAddressId)\r\n      }))\r\n    );\r\n\r\n    this.paymentMethod$ = this.employee.isTerminated\r\n      ? of(undefined)\r\n      : this.entitySelectors.employeePaymentMethod.entities$.pipe(\r\n          // find first EmployeePaymentMethod (should be only) for this EE\r\n          map(pms => pms.find(p => p.employeeId === this.employee.id))\r\n        );\r\n\r\n    this.taxes$ = this.entitySelectors.employeeTax.entities$.pipe(\r\n      map(taxes => taxes.filter(t => t.employeeId === eid && t.isRemoved !== true))\r\n    );\r\n  }\r\n\r\n  getFullName = getFullName;\r\n\r\n  getFilingStatus(filingStatus: string) {\r\n    switch (filingStatus) {\r\n      case 'S':\r\n        return 'Single';\r\n      case 'M':\r\n        return 'Married';\r\n      case 'H':\r\n        return 'Head of Household';\r\n      default:\r\n        return filingStatus;\r\n    }\r\n  }\r\n\r\n  getHireStatus() {\r\n    if (this.employee == null) {\r\n      return;\r\n    }\r\n    if (this.employee.isNewHire) {\r\n      return 'New Hire';\r\n    }\r\n    if (this.employee.isTerminated) {\r\n      return 'Terminated';\r\n    }\r\n    return 'Active';\r\n  }\r\n\r\n  getExemptReason(exemptReasonCode: string) {\r\n    return TaxExemptionReasonsCodes.getDisplayName(exemptReasonCode);\r\n  }\r\n\r\n  getSplitAmount(pm: EmployeePaymentMethod , val: number) {\r\n    return pm.strategy === PaymentStrategy.SplitAmount ? `$ ${val}` : `${val} %`;\r\n  }\r\n}\r\n","<div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <table class=\"table table-sm\">\r\n      <tbody>\r\n        <tr class=\"table-subheader\">\r\n          <th colspan=\"2\" class=\"text-capitalize\">Federal Taxes</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Federal Tax ID Number</th>\r\n          <td>{{ company.fein || 'Not Provided' }} {{ verificationStatus }}</td>\r\n        </tr>\r\n\r\n        <!-- Household filers -->\r\n        <ng-template [ngIf]=\"company.isHousehold\">\r\n          <tr>\r\n            <th>Filing Status</th>\r\n            <td>{{ householdFilersVm.filingStatus | householdFilerStatus }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Primary Filer</th>\r\n            <td>{{ householdFilersVm.primaryName }}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Primary Filer SSN</th>\r\n            <td>{{ householdFilersVm.primarySsn | ssn }}</td>\r\n          </tr>\r\n          <ng-template [ngIf]=\"householdFilers?.filingStatus === HouseholdFilersStatus.Joint\">\r\n            <tr>\r\n              <th>Spouse</th>\r\n              <td>{{ householdFilersVm.spouseName }}</td>\r\n            </tr>\r\n            <tr>\r\n              <th>Spouse SSN</th>\r\n              <td>{{ householdFilersVm.spouseSsn | ssn }}</td>\r\n            </tr>\r\n          </ng-template>\r\n        </ng-template>\r\n\r\n        <ng-container *ngFor=\"let tax of companyFedTaxes\">\r\n          <tr>\r\n            <td class=\"multi-row\" colspan=\"2\">\r\n              <span class=\"font-weight-bold\">{{ tax.name }} Tax</span>\r\n              <ul>\r\n                <li>\r\n                    <span class=\"col1\">Filing Status:</span>\r\n                    <span class=\"col2 text-capitalize\">{{ tax.isExempt | subjectexempt }}</span>\r\n                  </li>\r\n                  <li *ngIf=\"(tax.ein && tax.ein !== '') || tax.appliedForEin\">\r\n                    <span class=\"col1\">EIN:</span>\r\n                    <span class=\"col2\" *ngIf=\"!tax.appliedForEin\">{{ tax.ein }}</span>\r\n                    <span class=\"col2\" *ngIf=\"tax.appliedForEin\">APPLIED FOR</span>\r\n                  </li>\r\n                  <li *ngIf=\"tax.rateType === 'Variable'\">\r\n                    <span class=\"col1\">Rate:</span>\r\n                    <span class=\"col2\">{{ tax.rate }}</span>\r\n                  </li>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n        </ng-container>\r\n\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { Company, HouseholdFilers, HouseholdFilersStatus, FeinStatus, CompanyTax, REASON_SERVICE_UNAVAILABLE } from '@model';\r\nimport { getHouseholdFilerDisplayVm, HouseholdFilerDisplayVm } from '@utils/household-filer-utils';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-fed-tax',\r\n  templateUrl: './account-details-fed-tax.component.html'\r\n})\r\nexport class AccountDetailsFedTaxComponent implements OnInit {\r\n  @Input() company: Company;\r\n  @Input() householdFilers: HouseholdFilers;\r\n  @Input() companyFedTaxes: CompanyTax[];\r\n\r\n  householdFilersVm: HouseholdFilerDisplayVm;\r\n  HouseholdFilersStatus = HouseholdFilersStatus;\r\n\r\n  verificationStatus: string;\r\n\r\n  ngOnInit(): void {\r\n    this.householdFilersVm = getHouseholdFilerDisplayVm(this.householdFilers);\r\n\r\n    this.verificationStatus =\r\n      this.company.feinStatus === FeinStatus.Verified\r\n        ? '(Verified)'\r\n        : this.company.legalNameVerificationSkipReason === REASON_SERVICE_UNAVAILABLE\r\n          ? '(Verification skipped due to Service Unavailable)'\r\n          : '(Not verified)';\r\n  }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <table class=\"table table-sm\">\r\n            <tbody>\r\n                <tr>\r\n                    <th>First Name</th>\r\n                    <td>{{user?.firstName}}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Last Name</th>\r\n                    <td>{{user?.lastName}}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Username</th>\r\n                    <td>{{user?.username}}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Email</th>\r\n                    <td>{{user?.email}}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>Phone</th>\r\n                    <td>{{user?.phone | phone}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\nimport { User } from '@model';\r\n\r\n@Component({\r\n  selector: 'sp-account-details-user',\r\n  templateUrl: './account-details-user.component.html'\r\n})\r\nexport class AccountDetailsUserComponent implements OnInit {\r\n  @Input()\r\n  user: User;\r\n\r\n  ngOnInit(): void {}\r\n}\r\n"],"sourceRoot":""}