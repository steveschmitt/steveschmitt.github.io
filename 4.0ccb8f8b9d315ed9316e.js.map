{"version":3,"sources":["webpack:///./src/app/shared/deductions/company-deduction-item.ts","webpack:///./src/app/shared/deductions/deduction-category.ts","webpack:///./src/app/shared/deductions/deduction-command.ts","webpack:///./src/app/shared/deductions/get-deduction-categories.ts","webpack:///./src/app/shared/deductions/index.ts"],"names":[],"mappings":"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","file":"4.0ccb8f8b9d315ed9316e.js","sourcesContent":["import { CompanyDeduction, Deduction, DeductionKeyValue, DeductionPlanType } from '@model';\r\n\r\n/** Company Deduction item visible for a user in the UI\r\n *  Maps with 1 master Deduction type\r\n *  Maps with 1..N rows in DB (CompanyDeduction)\r\n */\r\nexport class CompanyDeductionItem {\r\n  /** Type */\r\n  deduction: Deduction;\r\n\r\n  /** Deduction instances and parameters */\r\n  companyDeductions: CompanyDeduction[];\r\n\r\n  name: string;\r\n  abbreviation: string;\r\n\r\n  isCompleted = false;\r\n\r\n  /** True if need to be saved */\r\n  isDirty: boolean;\r\n\r\n  /** True if marked for deletion */\r\n  isDeleted = false;\r\n\r\n  constructor(deduction: Deduction, isDirty = true,\r\n              companyDeductionList: CompanyDeduction[] = []) {\r\n    this.deduction = deduction;\r\n    this.isDirty = isDirty;\r\n    this.companyDeductions = companyDeductionList;\r\n\r\n    if (deduction.codeGroupId === 7) { // HSA\r\n      this.name = 'Health Savings Account (HSA)';\r\n      this.abbreviation = 'HSA';\r\n    } else {\r\n      if (companyDeductionList.length > 0) {\r\n        this.name = (companyDeductionList[0].description || '').trim();\r\n        this.abbreviation = (companyDeductionList[0].abbreviation || '').trim();\r\n      } else {\r\n        this.name = (deduction.defaultDescription || '').trim();\r\n        this.abbreviation = (deduction.defaultAbbreviation || '').trim();\r\n      }\r\n    }\r\n  }\r\n\r\n  get isPreTax(): boolean {\r\n    if (!this.companyDeductions) {\r\n      return null; // unknown\r\n    }\r\n    const filtered = this.companyDeductions.filter(notDeletedAndHasPrePosTax);\r\n    if (filtered.length !== 1) {\r\n      return null; // unknown\r\n    }\r\n    return filtered[0].deductionPlanTaxOptionCode === DeductionPlanType.PRETAX;\r\n  }\r\n  get isPostTax(): boolean {\r\n    if (!this.companyDeductions) {\r\n      return null; // unknown\r\n    }\r\n    const filtered = this.companyDeductions.filter(notDeletedAndHasPrePosTax);\r\n    if (filtered.length !== 1) {\r\n      return null; // unknown\r\n    }\r\n    return filtered[0].deductionPlanTaxOptionCode === DeductionPlanType.POSTTAX;\r\n  }\r\n  get isCatchUp(): boolean {\r\n    return (this.deduction.codeGroupId === 6); // 6 === Retirement Plans Catch Up  (Group)\r\n  }\r\n\r\n  viewModelToEntity(): void {\r\n    this.companyDeductions.map(t => {\r\n      t.description = this.name.trim();\r\n      t.abbreviation = this.abbreviation.trim();\r\n    });\r\n  }\r\n\r\n  isRetirement(): boolean {\r\n    return this.deduction.codeGroupId === 1 || // retirements group\r\n           this.deduction.codeGroupId === 6;   // retirement group catch-up\r\n  }\r\n  isP401KRepayment(): boolean {\r\n    return this.deduction.codeType === '401k Loan Repayment';   // repay for 401K\r\n  }\r\n\r\n  setCode(code: string): void {\r\n    const p = this.companyDeductions[0].parameters.find(p1 => p1.key === 'code');\r\n    if (p) {\r\n      p.type = 'string';\r\n      p.value = code;\r\n    } else {\r\n      this.companyDeductions[0].parameters.push(\r\n        new DeductionKeyValue('code', 'string', code));\r\n    }\r\n  }\r\n  getCode(): string {\r\n    if (this.companyDeductions.length === 0) {\r\n      return null;\r\n    }\r\n    const pCode = this.companyDeductions[0].parameters.find(p => p.key === 'code');\r\n    if (pCode) {\r\n      return <string> pCode.value;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction notDeletedAndHasPrePosTax(d: CompanyDeduction): boolean {\r\n  return !d.isRemoved &&\r\n    (d.deductionCodeTypeId === 20 ||  // Pre tax Medical\r\n     d.deductionCodeTypeId === 21 ||  // Pre tax Dental\r\n     d.deductionCodeTypeId === 22 ||  // Pre tax Vision\r\n     d.deductionCodeTypeId === 30 ||  // Post tax Medical\r\n     d.deductionCodeTypeId === 31 ||  // Post tax Dental\r\n     d.deductionCodeTypeId === 32     // Post tax Vision\r\n    );\r\n}\r\n\r\nexport function isNewCompanyDeductionItem(cd: CompanyDeductionItem): boolean {\r\n  if (!cd || !cd.companyDeductions || cd.companyDeductions.length === 0) {\r\n    return true;\r\n  }\r\n  return cd.companyDeductions[0].id === null;\r\n}\r\n","import { Deduction } from '@model';\r\nimport { CompanyDeductionItem } from './company-deduction-item';\r\n\r\nexport class DeductionCategory {\r\n  categoryId: number;            // Group Id\r\n  category: string;              // Group name\r\n  deductionTitles: DeductionTitleDictionary;\r\n  expanded = false;              // UI Accordion state: expanded/collapsed\r\n\r\n  constructor(code: number, title: string, expanded = false) {\r\n    this.categoryId = code;\r\n    this.category = title;\r\n    this.deductionTitles = {};\r\n    this.expanded = expanded;\r\n  }\r\n}\r\n\r\n\r\nexport interface DeductionTitleBuilder {\r\n  key: string;\r\n  code?: string;\r\n  baseLabel: string;\r\n  deductions?: Deduction[];\r\n  order?: number;\r\n  maxAllowedToCreate?: number;\r\n  companyDeductionItem?: CompanyDeductionItem;\r\n}\r\n\r\nexport class DeductionTitle {\r\n  readonly key: string;\r\n  readonly code: string;       // Instance code with respect key/type\r\n  codeSequencer = 1;        // sequencer to indentify instances by code (UI only)\r\n  deductions: Deduction[];  // used to reference deductions at the Company Level\r\n  companyDeductionItem: CompanyDeductionItem;  // used to point to company dedution at the Employee Level\r\n  selectionCriteria: string;\r\n  readonly maxAllowedToCreate: number;\r\n  freeSlots: number;\r\n  allowPreAndPost = false;\r\n\r\n  // User Interface properties\r\n  baseLabel: string;\r\n  order: number;\r\n  enabled = true;\r\n  isHidden = false;\r\n\r\n  hasPreTax = false;\r\n  hasPostTax = false;\r\n\r\n  constructor(options: DeductionTitleBuilder) {\r\n    options = options || {} as DeductionTitleBuilder;\r\n\r\n    this.key = options.key;\r\n    this.code = options.code || '1';\r\n    this.baseLabel = options.baseLabel;\r\n    this.deductions = options.deductions || [];\r\n    this.order = options.order || 1;\r\n    this.maxAllowedToCreate = options.maxAllowedToCreate || 1;\r\n    this.freeSlots = options.maxAllowedToCreate || 1;\r\n    this.companyDeductionItem = options.companyDeductionItem;\r\n  }\r\n\r\n  get label(): string {\r\n    if (this.allowPreAndPost) {\r\n      if (this.hasPreTax && !this.hasPostTax) {\r\n        return `${this.baseLabel} Post-Tax`;\r\n      } else if (!this.hasPreTax && this.hasPostTax) {\r\n        return `${this.baseLabel} Pre-Tax`;\r\n      } else {\r\n        return this.baseLabel;\r\n      }\r\n    }\r\n    if (this.maxAllowedToCreate > 1) {\r\n      return `${this.baseLabel} (${this.freeSlots})`;\r\n    }\r\n    return this.baseLabel;\r\n  }\r\n}\r\n\r\nexport interface DeductionTitleDictionary {\r\n  [key: string]: DeductionTitle;\r\n}\r\n","import { Deduction } from '@model';\r\nimport { CompanyDeductionItem } from './company-deduction-item';\r\n\r\nexport interface DeductionCommand {\r\n  readonly type: string;\r\n  readonly code: string;\r\n  readonly isNew: boolean;\r\n  deductions: Deduction[];\r\n}\r\n\r\nexport class CreateCompanyDeductionCommand implements DeductionCommand {\r\n  readonly type = 'create-company-deduction';\r\n  deductions: Deduction[];\r\n  code: string;\r\n\r\n  askPreOrPostTax = false;\r\n  forcePreTax = false;\r\n  forcePostTax = false;\r\n\r\n  get isNew(): boolean { return  true; }\r\n}\r\n\r\n\r\nexport class EditCompanyDeductionCommand implements DeductionCommand {\r\n  readonly type = 'edit-company-deduction';\r\n  deductions: Deduction[];\r\n  code: string;\r\n\r\n  get isNew(): boolean { return  false; }\r\n\r\n  constructor(public readonly cdi: CompanyDeductionItem) {\r\n  }\r\n}\r\n","import { Deduction, DeductionPlanType, EmployeeDeduction } from '@model';\nimport { CreateCompanyDeductionCommand, EditCompanyDeductionCommand } from './deduction-command';\nimport { CompanyDeductionItem } from './company-deduction-item';\nimport { DeductionCategory, DeductionTitleDictionary, DeductionTitle\n       } from './deduction-category';\n\n/** Group deductions types to be shown in User Interface (UI grouping criteria)\n * Company Deduction Catalog */\nexport function getDeductionCategories(ds: Deduction[]): DeductionCategory[] {\n  return [\n    buildDeductionCategoryRetirements(ds, 1, 'Retirement'),\n    buildDeductionCategoryInsurancePremiums(ds, 2, 'Insurance Premiums'),\n    buildDeductionCategoryHsa(ds, 3, 'HSA / FSA'),\n    buildDeductionCategoryOther(ds, 4, 'Other (Post-Tax)')\n  ];\n}\n\n/** Group deductions for employees\n * Employee Deduction Catalog showing CompanyDeductions\n * Inital setup\n */\nexport function buildInitialCompanyDeductionsCategories(): DeductionCategory[] {\n  const cat = new DeductionCategory(1, 'Company Deductions', true);\n  return [ cat ];\n}\n\n/** Group deductions for employees\n * Employee Deduction Catalog showing CompanyDeductions\n * Update data based on current state: company deduction + employee deduction state\n */\nexport function updateCompanyDeductionCategories(\n                        currentState:  DeductionCategory[],\n                        cdis: CompanyDeductionItem[],\n                        eds: EmployeeDeduction[]): DeductionCategory[] {\n\n  const cat = new DeductionCategory(1, 'Company Deductions', currentState[0].expanded);\n\n\n  (cdis || []).sort((a, b) => (a.name || '').localeCompare(b.name))\n              .map((cdi, index) => {\n    const dt = new DeductionTitle({\n      key: cdi.name,\n      baseLabel: cdi.name,\n      code: cdi.getCode(),\n      maxAllowedToCreate: 1,\n      order: index * 10,\n      companyDeductionItem: cdi\n    });\n    cat.deductionTitles[dt.key] = dt;\n  });\n\n  return [ cat ];\n}\n\n\n\n/** Updates the Tree State based on created deductions\n * @param categories List of categories\n * @param cdis List of created Deductions Items\n * @param currentInEdit Current element in edition, null if no one is in edit\n */\nexport function updateTreeState(\n  categories: DeductionCategory[],\n  cdis: CompanyDeductionItem[],\n  currentInEdit: CompanyDeductionItem\n): void {\n  categories.map(cat => {\n    Object.keys(cat.deductionTitles).map(key => {\n      const dt = cat.deductionTitles[key];\n\n      if (dt.maxAllowedToCreate === 1) {\n        if (dt.allowPreAndPost) {\n          dt.hasPreTax = getIsPreInstantiated(dt, cdis);\n          dt.hasPostTax = getIsPostInstantiated(dt, cdis);\n\n          dt.enabled = !(dt.hasPreTax && dt.hasPostTax);\n        } else {\n          dt.enabled = !isDeductionTypeInstantiated(dt, cdis);\n        }\n      } else if (dt.maxAllowedToCreate > 1) {\n          const freeSlots = getFreeSlotsForDeductionsType(dt, cdis);\n          dt.freeSlots = freeSlots;\n          dt.enabled = (freeSlots > 0);\n      }\n    });\n  });\n}\n\n// #region helper fns\nfunction getIsPreInstantiated(dt: DeductionTitle, cdis: CompanyDeductionItem[]): boolean {\n  return isInstantiatedByTaxMode(dt, cdis, true);\n}\nfunction getIsPostInstantiated(dt: DeductionTitle, cdis: CompanyDeductionItem[]): boolean {\n  return isInstantiatedByTaxMode(dt, cdis, false);\n}\nfunction isInstantiatedByTaxMode(dt: DeductionTitle, cdis: CompanyDeductionItem[], isPreTax: boolean): boolean {\n  const d = dt.deductions.find(d1 => d1.deductionPlanTaxOptionCode === (isPreTax ? 'PRETAX' : 'POSTTAX'));\n  const instances = cdis.filter(cdi =>\n    !cdi.isDeleted && cdi.deduction === d);\n  return instances.length === 1;\n}\n\nfunction getFreeSlotsForDeductionsType(dt: DeductionTitle, cdis: CompanyDeductionItem[]): number {\n  const instances = cdis.filter(cdi =>\n         !cdi.isDeleted &&\n          cdi.deduction.codeType === dt.key);\n\n  if (instances.length > 0) {\n    return dt.maxAllowedToCreate - instances.length;\n  }\n  if (dt.key === 'Retirements') {\n    return dt.maxAllowedToCreate - cdis.filter(cdi =>\n      !cdi.isDeleted && cdi.deduction.codeGroupId === 1 // Retiremement Plans Group\n    ).length;\n  }\n  if (dt.key === 'HSA') {\n    return dt.maxAllowedToCreate - cdis.filter(cdi =>\n      !cdi.isDeleted && cdi.deduction.codeGroupId === 7 // HSA\n    ).length;\n  }\n  return dt.maxAllowedToCreate;\n}\n\nfunction isDeductionTypeInstantiated(dt: DeductionTitle, cdis: CompanyDeductionItem[]): boolean {\n  const foundInstance = cdis.filter(cdi => !cdi.isDeleted)\n                            .find(cdi =>\n                              cdi.getCode() === dt.code &&\n                              cdi.deduction.codeType === dt.key\n                            );\n  if (foundInstance) {\n    return true;\n  }\n  if (dt.key === 'Retirements') {\n    return cdis.filter(cdi => !cdi.isDeleted)\n               .find(cdi =>\n                 cdi.deduction.codeGroupId === 1 // Retiremement Plans Group\n               ) !== undefined;\n  }\n  if (dt.key === 'HSA') {\n    return cdis.filter(cdi => !cdi.isDeleted)\n               .find(cdi =>\n                 cdi.deduction.codeGroupId === 7 // HSA\n               ) !== undefined;\n  }\n  return false;\n}\n\nexport function buildCommandForCreation(dt: DeductionTitle): CreateCompanyDeductionCommand {\n  const res = new CreateCompanyDeductionCommand();\n  res.askPreOrPostTax = dt.allowPreAndPost && !dt.hasPreTax && !dt.hasPostTax;\n  res.forcePreTax = dt.allowPreAndPost && !dt.hasPreTax && dt.hasPostTax;\n  res.forcePostTax = dt.allowPreAndPost && dt.hasPreTax && !dt.hasPostTax;\n  if (res.forcePreTax) {\n    res.deductions = dt.deductions.filter(d => d.deductionPlanTaxOptionCode === DeductionPlanType.PRETAX);\n    res.code = '2';\n  } else if (res.forcePostTax) {\n    res.deductions = dt.deductions.filter(d => d.deductionPlanTaxOptionCode === DeductionPlanType.POSTTAX);\n    res.code = '2';\n  } else if (dt.maxAllowedToCreate > 1) {\n    res.deductions = dt.deductions;\n    res.code = (dt.codeSequencer++).toString();\n  } else {\n    res.deductions = dt.deductions;\n    res.code = '1';\n  }\n\n\n  return res;\n}\n\nexport function buildCommandForEdit(cdi: CompanyDeductionItem): EditCompanyDeductionCommand {\n  const res = new EditCompanyDeductionCommand(cdi);\n  return res;\n}\n\n\nfunction buildDeductionCategoryRetirements(\n  ds: Deduction[],\n  code: number,\n  title: string\n): DeductionCategory {\n  const cat = new DeductionCategory(code, title);\n  const filteredDeductions: Deduction[] = ds.filter(\n    it =>\n      (it.codeGroupId === 1 || // Retirements plans\n        it.codeGroupId === 6) && // Retirement Plans Catch Up\n      it.codeType !== '401k Loan Repayment'\n  );\n  const plan401Replay: Deduction[] = ds.filter(it => it.codeType === '401k Loan Repayment');\n\n  const ret = new DeductionTitle({\n    key: 'Retirements',\n    baseLabel: 'Retirements',\n    deductions: filteredDeductions,\n    order: 10\n  });\n  const loanRepayment = new DeductionTitle({\n    key: '401k Loan Repayment',\n    baseLabel: '401k Loan Repayment',\n    deductions: plan401Replay,\n    order: 20\n  });\n  cat.deductionTitles = {\n    Retirements: ret,\n    '401K Repayment': loanRepayment\n  };\n  return cat;\n}\nfunction buildDeductionCategoryInsurancePremiums(ds: Deduction[], code: number, title: string): DeductionCategory {\n  const cat = buildDeductionCategory(ds, code, title);\n\n  cat.deductionTitles['Medical'].allowPreAndPost = true;\n  cat.deductionTitles['Vision'].allowPreAndPost = true;\n  cat.deductionTitles['Dental'].allowPreAndPost = true;\n\n  const miscPre = ds.find(it =>\n    it.codeType === 'Miscellaneous Pre-Tax' && it.codeGroupId === 2); // Pre-tax\n  const miscPost = ds.find(it =>\n    it.codeType === 'Miscellaneous Post-Tax' && it.codeTypeId === 3); // Post-tax\n\n  delete cat.deductionTitles['Miscellaneous Pre-Tax'];\n  delete cat.deductionTitles['Miscellaneous Post-Tax'];\n\n  const key = 'Miscellaneous Pre-Tax';\n  const label = key;\n  createCustomDeductionTitle(cat, key, null, label, [ miscPre ], 500, 5);\n  const key2 = 'Miscellaneous Post-Tax';\n  const label2 = key2;\n  createCustomDeductionTitle(cat, key2, null, label2, [ miscPost ], 501, 5);\n\n  return cat;\n}\nfunction buildDeductionCategoryHsa(ds: Deduction[], code: number, title: string): DeductionCategory {\n  const cat = buildDeductionCategory(ds, code, title);\n\n  // Inject FSA prefix on labels (per reqs.)\n  cat.deductionTitles['Dependent Care'].baseLabel = 'FSA Dependent Care';\n  cat.deductionTitles['Transportation'].baseLabel = 'FSA Transportation';\n  cat.deductionTitles['Parking'].baseLabel = 'FSA Parking';\n\n  return cat;\n\n}\nfunction buildDeductionCategoryOther(ds: Deduction[], code: number, title: string): DeductionCategory {\n  const cat = buildDeductionCategory(ds, code, title);\n\n  const keyGarnishmentGoal = 'Garnishment with Goal';\n  const keyGarnishmentNoGoal = 'Garnishment No Goal';\n  const keyChildSupport = 'Child Support';\n  const keyMiscellaneousGoal =  'Miscellaneous with Goal';\n  const keyMiscellaneousNoGoal =  'Miscellaneous No Goal';\n\n  const garnishmentGoal: Deduction = ds.find(it => it.codeType === keyGarnishmentGoal);\n  const garnishmentNoGoal: Deduction = ds.find(it => it.codeType === keyGarnishmentNoGoal);\n  const childSupport: Deduction = ds.find(it => it.codeType === keyChildSupport);\n  const customWithGoal: Deduction = ds.find(it => it.codeType === keyMiscellaneousGoal);\n  const customNoGoal: Deduction = ds.find(it => it.codeType === keyMiscellaneousNoGoal);\n\n  createCustomDeductionTitle(cat,\n    keyGarnishmentGoal, null, keyGarnishmentGoal, [ garnishmentGoal ], 2, 8);\n  createCustomDeductionTitle(cat,\n    keyGarnishmentNoGoal, null, keyGarnishmentNoGoal, [ garnishmentNoGoal ], 3, 8);\n  createCustomDeductionTitle(cat,\n    keyChildSupport, null, keyChildSupport, [ childSupport ], 4, 5);\n  const label1 = 'Custom with Goal';\n  createCustomDeductionTitle(cat,\n    keyMiscellaneousGoal, null, label1, [ customWithGoal ], 500, 5);\n  const label2 = 'Custom No Goal';\n  createCustomDeductionTitle(cat,\n    keyMiscellaneousNoGoal, null, label2, [ customNoGoal ], 501, 5);\n\n  return cat;\n}\n\n\nfunction createCustomDeductionTitle(\n    cat: DeductionCategory, key: string, code: string,\n    label: string, ds: Deduction[], order: number, maxToCreate: number): void {\n\n  const dt = new DeductionTitle({\n    key,\n    code,\n    baseLabel: label,\n    deductions: ds,\n    order,\n    maxAllowedToCreate: maxToCreate\n  });\n  const dicKey = code ? (key + '_' + code) : key;\n  cat.deductionTitles[dicKey] = dt;\n}\n\nfunction buildDeductionCategory(\n  ds: Deduction[],\n  code: number,\n  title: string\n): DeductionCategory {\n  const cat = new DeductionCategory(code, title);\n  let filteredDeductions: Deduction[];\n  if (code === 2) {\n    filteredDeductions = ds.filter(\n      it => ( it.codeGroupId === 2 || it.codeGroupId === 3 ) // Pre-Tax Insurance Premiums // Post-Tax Insurance Premiums\n    );\n  } else if (code === 3) {\n    filteredDeductions = ds.filter(\n      it => it.codeGroupId === 7 || it.codeGroupId === 4 // HSA // FSA\n    );\n  } else if (code === 4) {\n    filteredDeductions = ds.filter(\n      it =>\n        (it.codeGroupId !== 1 && // any other groups not grouped before\n          it.codeGroupId !== 2 &&\n          it.codeGroupId !== 3 &&\n          it.codeGroupId !== 4 &&\n          it.codeGroupId !== 5 &&\n          it.codeGroupId !== 6 &&\n          it.codeGroupId !== 7) ||\n        (it.codeGroupId === 5 &&\n          !(it.codeType === 'Miscellaneous with Goal' || it.codeType === 'Miscellaneous No Goal') &&\n          it.codeType !== '401k Loan Repayment')\n    );\n  }\n  cat.deductionTitles = groupTitles(filteredDeductions);\n  groupItems(cat);\n  reorderItems(cat);\n  return cat;\n}\n\n/** Group HSA entries to have only one entry called:\n *  Health Savings Account (HSA) */\nfunction groupItems(dc: DeductionCategory) {\n  if (dc.categoryId === 2) {\n    // Add two items for cafeteria 2\n    const cafeteria2Entry = Object.values(dc.deductionTitles)\n                                  .find(dt => dt.key === 'CAFE 2 deduction');\n    delete dc.deductionTitles[cafeteria2Entry.key];\n\n    const key = cafeteria2Entry.key;\n    const label = 'Cafeteria Plan';\n    createCustomDeductionTitle(dc, key, '1', label, cafeteria2Entry.deductions, 200, 2);\n  }\n\n  if (dc.categoryId === 3) {\n    // HSA / FSA\n    const hsaEntries = Object.values(dc.deductionTitles).filter(dt => dt.key.includes(' HSA'));\n    const hsa = new DeductionTitle({\n      key: 'HSA',\n      baseLabel: 'Health Savings Account (HSA)',\n      deductions: hsaEntries.map(it => it.deductions).reduce((a, b) => a.concat(b), []),\n      order: -1,\n    });\n    hsaEntries.map(it => {\n      delete dc.deductionTitles[it.key];\n    });\n    dc.deductionTitles[hsa.key] = hsa;\n  }\n}\n\nfunction reorderItems(dc: DeductionCategory) {\n  if (dc.categoryId === 2) {\n    // Insurance Premiums\n    setItemOrder('Life Insurance', 100);\n    setItemOrder('Cafeteria Plan', 200);\n    setItemOrder('Miscellaneous', 300);\n  }\n  if (dc.categoryId === 3) {\n    // HSA / FSA\n    setItemOrder('HSA', -1);\n  }\n  if (dc.categoryId === 4) {\n    // Others\n    setItemOrder('Meals', -10);\n    setItemOrder('Garnishment with Goal', -9);\n    setItemOrder('Garnishment No Goal', -8);\n    setItemOrder('Child Support', -7);\n  }\n\n  // WB: Set order only if magic string title is found\n  // The magic strings worry me.\n  // If simply set `dc.deductionTitles[title].order`, page would crash when title not found\n  // App should not crash just because we displayed items in the wrong order\n  function setItemOrder(title: string, order: number) {\n    const item = dc.deductionTitles[title];\n    if (item) {\n      item.order = order;\n    }\n  }\n}\n\nfunction groupTitles(ds: Deduction[]): DeductionTitleDictionary {\n  const dic: DeductionTitleDictionary = {};\n  let index = 0;\n  ds.map(d => {\n    if (!dic[d.codeType]) {\n      // first one\n      dic[d.codeType] = new DeductionTitle({\n        key: d.codeType,\n        baseLabel: d.codeType,\n        deductions: [d],\n        order: (index++) * 10\n      });\n    } else {\n      // existing category, add additional one\n      dic[d.codeType].deductions.push(d);\n    }\n  });\n\n  // If multiple deductions on an item, build a selection criteria\n  for (const key in dic) {\n    if (dic.hasOwnProperty(key)) {\n      const title = dic[key];\n      if (title.deductions.length > 1) {\n        title.selectionCriteria = buildSelectionCriteria(title.deductions);\n      }\n    }\n  }\n  return dic;\n}\n\nfunction buildSelectionCriteria(ds: Deduction[]): string {\n  const preOrPostTax = ds.filter(it => it.codeGroupId === 2 || it.codeGroupId === 3);\n  if (preOrPostTax.length === ds.length) {\n    return 'PRE_OR_POST_TAX';\n  }\n  return 'UNKNOWN';\n}\n\n// #endregion helper fns\n","export * from './company-deduction-item';\r\nexport * from './deduction-category';\r\nexport * from './deduction-command';\r\nexport * from './get-deduction-categories';\r\n"],"sourceRoot":""}